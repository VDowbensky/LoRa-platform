
void deregister_tm_clones(void);
void register_tm_clones(void);
undefined * __do_global_dtors_aux(undefined *param_1);
void frame_dummy(void);
void __assert_func(char *file,int line,char *func,char *failedexpr);
void __assert(char *__assertion,char *__file,int __line);
int _fprintf_r(_reent.conflict *ptr,FILE *fp,char *fmt,...);
int fprintf(FILE *__stream,char *__format,...);
void __libc_init_array(void);
void * malloc(size_t __size);
void free(void *__ptr);
int memcmp(void *__s1,void *__s2,size_t __n);
void * memcpy(void *__dest,void *__src,size_t __n);
void * memmove(void *__dest,void *__src,size_t __n);
void * memset(void *__s,int __c,size_t __n);
void _free_r(_reent.conflict *reent_ptr,void *free_p);
void * _malloc_r(_reent.conflict *reent_ptr,malloc_size_t s);
int __sfputc_r(_reent.conflict *ptr,int c,FILE *fp);
int __sfputs_r(_reent.conflict *ptr,FILE *fp,char *buf,size_t len);
int __sprint_r(_reent.conflict *ptr,FILE *fp,__suio *uio);
int _vfprintf_r(_reent.conflict *data,FILE *fp,char *fmt0,va_list ap);
int vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg);
int _printf_common(_reent.conflict *data,_prt_data_t *pdata,int *realsz,FILE *fp,_func_int__reent_ptr_FILE_ptr_char_ptr_size_t *pfunc);
int _printf_i(_reent.conflict *data,_prt_data_t *pdata,FILE *fp,_func_int__reent_ptr_FILE_ptr_char_ptr_size_t *pfunc,va_list *ap);
int _printf_r(_reent.conflict *ptr,char *fmt,...);
int printf(char *__format,...);
int _puts_r(_reent.conflict *ptr,char *s);
int puts(char *__s);
void srand(uint __seed);
int rand(void);
void * _sbrk_r(_reent.conflict *ptr,ptrdiff_t incr);
int _snprintf_r(_reent.conflict *ptr,char *str,size_t size,char *fmt,...);
int snprintf(char *__s,size_t __maxlen,char *__format,...);
int _sprintf_r(_reent.conflict *ptr,char *str,char *fmt,...);
int sprintf(char *__s,char *__format,...);
int strcmp(char *__s1,char *__s2);
int FUN_080012f4(uint *param_1,uint *param_2);
size_t strlen(char *__s);
int _vsnprintf_r(_reent.conflict *ptr,char *str,size_t size,char *fmt,va_list ap);
int vsnprintf(char *__s,size_t __maxlen,char *__format,__gnuc_va_list __arg);
int _vsprintf_r(_reent.conflict *ptr,char *str,char *fmt,va_list ap);
int vsprintf(char *__s,char *__format,__gnuc_va_list __arg);
int __swbuf_r(_reent.conflict *ptr,int c,FILE *fp);
int __swbuf(int c,FILE *fp);
int __swsetup_r(_reent.conflict *ptr,FILE *fp);
void abort(void);
int __sflush_r(_reent.conflict *ptr,FILE *fp);
int _fflush_r(_reent.conflict *ptr,FILE *fp);
int fflush(FILE *__stream);
int __fp_lock(FILE *ptr);
void _cleanup_r(_reent.conflict *ptr);
undefined4 __fp_unlock(void);
_glue * __sfmoreglue(_reent.conflict *d,int n);
FILE * __sfp(_reent.conflict *d);
void __sinit(_reent.conflict *s);
void _cleanup(EVP_PKEY_CTX *ctx);
void __sinit(_reent.conflict *s);
void __sfp_lock_acquire(void);
void __sfp_lock_release(void);
void __sinit_lock_acquire(void);
void __sinit_lock_release(void);
void __fp_lock_all(void);
void __fp_unlock_all(void);
int __sfvwrite_r(_reent.conflict *ptr,FILE *fp,__suio *uio);
int _fwalk(_reent.conflict *ptr,_func_int_FILE_ptr *function);
int _fwalk_reent(_reent.conflict *ptr,_func_int__reent_ptr_FILE_ptr *reent_function);
int __swhatbuf_r(_reent.conflict *ptr,FILE *fp,size_t *bufsize,int *couldbetty);
void __smakebuf_r(_reent.conflict *ptr,FILE *fp);
void * memchr(void *__s,int __c,size_t __n);
void __malloc_lock(_reent.conflict *ptr);
void __malloc_unlock(void);
void * _realloc_r(_reent.conflict *reent_ptr,void *ptr,malloc_size_t size);
int __ssputs_r(_reent.conflict *ptr,FILE *fp,char *buf,size_t len);
int __ssprint_r(_reent.conflict *ptr,FILE *fp,__suio *uio);
int _svfprintf_r(_reent.conflict *data,FILE *fp,char *fmt0,va_list ap);
int _init_signal_r(_reent.conflict *ptr);
int _init_signal_r(_reent.conflict *ptr);
_sig_func_ptr _signal_r(_reent.conflict *ptr,int sig,_sig_func_ptr func);
int _raise_r(_reent.conflict *ptr,int sig);
int __sigtramp_r(_reent.conflict *ptr,int sig);
int raise(int __sig);
__sighandler_t signal(int __sig,__sighandler_t __handler);
int _init_signal(void);
int __sigtramp(int sig);
int _kill_r(_reent.conflict *ptr,int pid,int sig);
int _getpid_r(_reent.conflict *ptr);
int __sread(_reent.conflict *ptr,void *cookie,char *buf,int n);
int __seofread(_reent.conflict *_ptr,void *cookie,char *buf,int len);
int __swrite(_reent.conflict *ptr,void *cookie,char *buf,int n);
_fpos_t __sseek(_reent.conflict *ptr,void *cookie,_fpos_t offset,int whence);
int __sclose(_reent.conflict *ptr,void *cookie);
_ssize_t _write_r(_reent.conflict *ptr,int fd,void *buf,size_t cnt);
int _close_r(_reent.conflict *ptr,int fd);
int _fstat_r(_reent.conflict *ptr,int fd,stat *pstat);
int _isatty_r(_reent.conflict *ptr,int fd);
_off_t _lseek_r(_reent.conflict *ptr,int fd,_off_t pos,int whence);
malloc_size_t _malloc_usable_size_r(_reent.conflict *reent_ptr,void *ptr);
_ssize_t _read_r(_reent.conflict *ptr,int fd,void *buf,size_t cnt);
int _close(int __fd);
int _fstat(int __fd,stat *__buf);
__pid_t _getpid(void);
int _isatty(int __fd);
int _kill(__pid_t __pid,int __sig);
__off_t _lseek(int __fd,__off_t __offset,int __whence);
ssize_t _read(int __fd,void *__buf,size_t __nbytes);
void * _sbrk(intptr_t __delta);
ssize_t _write(int __fd,void *__buf,size_t __n);
void _exit(int __status);
ulonglong __aeabi_drsub(uint param_1,uint param_2,uint param_3,uint param_4);
ulonglong __subdf3(uint param_1,uint param_2,uint param_3,uint param_4);
ulonglong __aeabi_dadd(uint param_1,uint param_2,uint param_3,uint param_4);
ulonglong __floatunsidf(uint param_1);
ulonglong __aeabi_i2d(uint param_1);
ulonglong __aeabi_f2d(uint param_1,undefined4 param_2,undefined4 param_3,uint param_4);
ulonglong __floatundidf(uint param_1,uint param_2);
ulonglong __aeabi_l2d(uint param_1,uint param_2);
ulonglong __muldf3(uint param_1,uint param_2,uint param_3,uint param_4);
ulonglong FUN_08002fb4(uint param_1,uint param_2,uint param_3,uint param_4);
ulonglong __divdf3(uint param_1,uint param_2,uint param_3,uint param_4);
ulonglong FUN_0800319a(uint param_1,uint param_2,uint param_3,uint param_4);
uint __gedf2(uint param_1,uint param_2,uint param_3,uint param_4);
uint __ledf2(uint param_1,uint param_2,uint param_3,uint param_4);
uint __nedf2(uint param_1,uint param_2,uint param_3,uint param_4);
void __aeabi_cdrcmple(uint param_1,uint param_2,uint param_3,uint param_4);
uint __aeabi_cdcmpeq(uint param_1,uint param_2,uint param_3,uint param_4);
bool __aeabi_dcmpeq(uint param_1,uint param_2,uint param_3,uint param_4);
bool __aeabi_dcmplt(uint param_1,uint param_2,uint param_3,uint param_4);
bool __aeabi_dcmple(uint param_1,uint param_2,uint param_3,uint param_4);
bool __aeabi_dcmpge(uint param_1,uint param_2,uint param_3,uint param_4);
bool __aeabi_dcmpgt(uint param_1,uint param_2,uint param_3,uint param_4);
uint __aeabi_d2iz(uint param_1,uint param_2);
uint __aeabi_d2uiz(uint param_1,uint param_2);
undefined4 __aeabi_uldivmod(undefined4 param_1,undefined4 param_2,int param_3,int param_4);
UDItype __udivmoddi4(UDItype n,UDItype d,UDItype *rp);
void __aeabi_idiv0(void);
void HardFault_Handler(void);
void HardFault_Handler_C(uint32_t *hardfault_args);
void show_message_start_lorastudio(void);
void show_message_standalone_mode(void);
void show_message_connected_mode(void);
int main(void);
void print_init(hci_t *hci_instance_pointer);
void array_to_string(uint8_t *array,uint16_t len,char *string);
hci_return_code_t log_message(DeviceMessage__Level level,DeviceMessage__LogSource source,char *string);
hci_return_code_t dump_message(DeviceMessage__Level level,DeviceMessage__LogSource source,char *string);
hci_return_code_t _log_message(DeviceMessage__Level level,DeviceMessage__LogSource source,char *string,uint8_t tag);
size_t strnlen(char *__string,size_t __maxlen);
void dynamic_logs_nvm_init(void);
void dynamic_log_save_status(void);
void dynamic_log_restore_status(void);
void dynamic_log_message_nvm_factory_reset(void);
void dynamic_log_message(DeviceMessage__Level level,DeviceMessage__LogSource source,_Bool save_in_nvm,char *fmt,...);
void dynamic_log_message_back_up(void);
void dynamic_log_dump_runtime(void);
void dynamic_log_message_nvm_dump(void);
uint32_t dynamic_log_message_get_nvm_logs_size(_Bool *all_file_ids_used);
_Bool dynamic_log_message_prepare_get_logs_size(uint8_t *buffer,uint16_t *packed_buffer_length,uint16_t max_length);
void next_file_id(void);
uint16_t get_next_file_id(uint16_t current_file_id);
void save_logs_in_nvm(uint16_t length);
void buffered_save(uint8_t *buffer,uint16_t length,uint16_t *index,_Bool reset_if_full);
void running_mode_set_connected(void);
void running_mode_set_standalone(void);
_Bool is_running_mode_standalone(void);
_Bool is_running_mode_connected(void);
_Bool is_running_mode_waiting_for_connection(void);
_Bool running_mode_prepare_get_mode(uint8_t *buffer,uint16_t *packed_buffer_length,uint16_t max_length);
void restore_running_mode(void);
hci_buffer_return_code_t hci_init(hci_t *hci);
void hci_reset_rx(hci_t *hci);
_Bool hci_has_datagram_available(hci_t *hci);
void hci_run(hci_t *hci);
hci_return_code_t hci_start_rx(hci_t *hci);
hci_return_code_t hci_send_completed(hci_t *hci);
hci_return_code_t hci_send_datagram(hci_t *hci,hci_datagram_t *datagram);
hci_return_code_t hci_send_datagram_with_priority(hci_t *hci,hci_datagram_t *datagram,hci_priority_datagram_t priotrity);
void hci_prepare_and_send_datagram(hci_t *hci,hci_datagram_t *datagram);
void hci_send_ack(hci_t *hci);
void hci_register_waiting_dma(hci_t *hci);
void hci_unregister_waiting_dma(void);
void hci_check_and_unregister_waiting_dma(hci_t *hci);
void hci_interrupt_handler(hci_t *hci,hci_irq_source_t irq_source);
void hci_receive_callback(void);
void hci_transmit_callback(void);
void hci_receive_error_callback(void);
void hci_transmit_error_callback(void);
hci_buffer_return_code_t hci_buffer_init(uint8_t *buffer,uint32_t length,hci_buffer_t *hci_buffer);
hci_buffer_return_code_t hci_buffer_push(hci_buffer_t *hci_buffer,hci_datagram_t *datagram);
hci_buffer_return_code_t hci_buffer_pop(hci_buffer_t *hci_buffer,uint8_t *tx_buffer,uint32_t size);
_Bool datagram_parser_parse(size_t length,uint8_t *buffer,command_t *command);
_Bool datagram_parser_prepare_log(char *string,DeviceMessage__Level level,DeviceMessage__LogSource type,uint8_t *buffer,uint16_t *packed_buffer_length,uint16_t max_length);
smtc_hal_mcu_uart_inst_t * get_uart_instance(void);
void uart_init(_func_void *callback_rx,_func_void *callback_tx,_func_void *callback_error_rx,_func_void *callback_error_tx);
void uart_send(uint8_t *buffer,uint32_t length);
void uart_receive(uint8_t *buffer,uint32_t length);
demo_status_t demo_start(demo_t *demo);
demo_status_t demo_stop(demo_t *demo);
demo_status_t demo_runtime(demo_t *demo);
void demo_register_configurations_to_manager(demo_t *demo,configuration_manager_t *manager);
void demo_manager_register_demos(configuration_manager_t *manager);
void demo_manager_print_registered_demos(void);
void demo_manager_interpret_command(command_t *command);
uint8_t demo_manager_get_last_run_demo_id(void);
void demo_manager_runtime_demo(void);
void demo_manager_check_demo_status(void);
void demo_manager_load_demo_to_start_from_nvm(configuration_manager_t *manager);
void demo_manager_stop_running_demo(void);
void demo_manager_start_demo(demo_t *demo);
void demo_manager_register_demo(command_demo_t cmd_demo,demo_t *demo);
demo_t * demo_manager_get_demo_from_registry(command_demo_t cmd_demo);
ral_status_t ral_reset(ral_t *radio);
ral_status_t ral_set_rx_tx_fallback_mode(ral_t *radio,ral_fallback_modes_t fallback_mode);
ral_status_t ral_get_pkt_payload(ral_t *radio,uint16_t max_size_in_bytes,uint8_t *buffer,uint16_t *size_in_bytes);
ral_status_t ral_clear_irq_status(ral_t *radio,ral_irq_t irq);
ral_status_t ral_get_and_clear_irq_status(ral_t *radio,ral_irq_t *irq);
ral_status_t ral_set_rf_freq(ral_t *radio,uint32_t freq_in_hz);
ral_status_t ral_set_gfsk_mod_params(ral_t *radio,ral_gfsk_mod_params_t *params);
ral_status_t ral_set_gfsk_pkt_params(ral_t *radio,ral_gfsk_pkt_params_t *params);
ral_status_t ral_set_gfsk_pkt_address(ral_t *radio,uint8_t node_address,uint8_t broadcast_address);
ral_status_t ral_set_lora_mod_params(ral_t *radio,ral_lora_mod_params_t *params);
ral_status_t ral_set_lora_pkt_params(ral_t *radio,ral_lora_pkt_params_t *params);
ral_status_t ral_get_gfsk_rx_pkt_status(ral_t *radio,ral_gfsk_rx_pkt_status_t *rx_pkt_status);
ral_status_t ral_get_lora_rx_pkt_status(ral_t *radio,ral_lora_rx_pkt_status_t *rx_pkt_status);
uint32_t ral_get_lora_time_on_air_in_ms(ral_t *radio,ral_lora_pkt_params_t *pkt_p,ral_lora_mod_params_t *mod_p);
uint32_t ral_get_gfsk_time_on_air_in_ms(ral_t *radio,ral_gfsk_pkt_params_t *pkt_p,ral_gfsk_mod_params_t *mod_p);
ral_status_t ral_set_gfsk_sync_word(ral_t *radio,uint8_t *sync_word,uint8_t sync_word_len);
ral_status_t ral_set_lora_sync_word(ral_t *radio,uint8_t sync_word);
ral_status_t ral_set_gfsk_crc_params(ral_t *radio,uint32_t seed,uint32_t polynomial);
ral_status_t ral_set_gfsk_whitening_seed(ral_t *radio,uint16_t seed);
uint8_t apps_common_compute_lora_ldro(ral_lora_sf_t sf,ral_lora_bw_t bw);
void apps_common_shield_init(shield_t *shield);
void apps_common_shield_deinit(shield_t *shield);
apps_common_status_t apps_common_system_init(shield_t *shield);
void apps_common_radio_init(shield_t *shield);
void apps_common_receive(void *context,uint8_t *buffer,uint8_t buffer_length,uint16_t *size);
void apps_common_update_callbacks(apps_common_interrupts_callbacks_t *callbacks);
void apps_common_reset_callbacks(void);
void apps_common_irq_process(void *context,ral_irq_t irq_filter_mask);
uint32_t get_time_on_air_in_ms(shield_t *shield);
void radio_on_dio_irq(void *context);
void on_tx_done(void);
void on_rx_done(void);
void on_rx_timeout(void);
void on_preamble_detected(void);
void on_syncword_header_valid(void);
void on_header_error(void);
void on_fsk_len_error(void);
void on_rx_crc_error(void);
void on_cad_done_undetected(void);
void on_cad_done_detected(void);
void on_lora_rx_timestamp(void);
void on_wifi_scan_done(void);
void on_gnss_scan_done(void);
char * ral_fallback_modes_to_str(ral_fallback_modes_t mode);
char * ral_gfsk_crc_type_to_str(ral_gfsk_crc_type_t type);
char * ral_gfsk_pulse_shape_to_str(ral_gfsk_pulse_shape_t shape);
char * ral_lora_sf_to_str(ral_lora_sf_t sf);
char * ral_lora_bw_to_str(ral_lora_bw_t bw);
char * ral_lora_cr_to_str(ral_lora_cr_t cr);
char * ral_gfsk_preamble_detector_to_str(ral_gfsk_preamble_detector_t detector);
char * ral_lora_pkt_len_modes_to_str(ral_lora_pkt_len_modes_t mode);
char * ral_pkt_type_to_str(ral_pkt_type_t type);
char * ral_gfsk_address_filtering_to_str(ral_gfsk_address_filtering_t filtering);
char * ral_gfsk_dc_free_to_str(ral_gfsk_dc_free_t dc);
char * ral_gfsk_pkt_len_modes_to_str(ral_gfsk_pkt_len_modes_t mode);
void read_rf_freq_in_hz_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_rf_freq_in_hz_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_tx_output_pwr_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_tx_output_pwr_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_enable_rx_boost_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_enable_rx_boost_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_payload_length_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_payload_length_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_regulator_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_regulator_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_iq_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_iq_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_crc_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_crc_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_preamble_len_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_preamble_len_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_sync_word_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_sync_word_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_ldro_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_ldro_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_dev_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_dev_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_bitrate_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_bitrate_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_bandwidth_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_bandwidth_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_preamble_len_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_preamble_len_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_syncword_len_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_syncword_len_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_sync_word_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_sync_word_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_whitening_seed_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_whitening_seed_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_crc_seed_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_crc_seed_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_crc_polynomial_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_crc_polynomial_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_node_address_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_node_address_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_broadcast_address_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_broadcast_address_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_preamble_len_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_preamble_len_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_sync_word_len_bytes_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_sync_word_len_bytes_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_match_sync_word_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_match_sync_word_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_crc_type_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_crc_type_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_bw_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_bw_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_cr_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_cr_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_pulse_shape_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_pulse_shape_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_header_type_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_header_type_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_syncword_1_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_syncword_1_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_syncword_2_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_syncword_2_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_flrc_syncword_3_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_flrc_syncword_3_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_bitrate_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_bitrate_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_bandwidth_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_bandwidth_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_preamble_length_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_preamble_length_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_pulse_shape_filter_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_pulse_shape_filter_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_shape_filter_bt_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_shape_filter_bt_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_mag_depth_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_mag_depth_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_address_filtering_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_address_filtering_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_header_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_header_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_encoding_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_encoding_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_crc_type_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_crc_type_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_crc_polynomial_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_crc_polynomial_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_crc_seed_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_crc_seed_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_sync_word_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_sync_word_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_sync_word_len_bits_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_sync_word_len_bits_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_sync_word_bit_order_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_sync_word_bit_order_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_sync_word_is_encoded_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_sync_word_is_encoded_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_rx_detector_sfd_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_rx_detector_sfd_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_rx_detector_pattern_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_rx_detector_pattern_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_rx_detector_pattern_length_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_rx_detector_pattern_length_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_rx_detector_pattern_repeat_nb_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_rx_detector_pattern_repeat_nb_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_rx_detector_sfd_length_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_rx_detector_sfd_length_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_node_address_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_node_address_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_broadcast_address_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_broadcast_address_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_whitening_bit_index_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_whitening_bit_index_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_whitening_polynomial_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_whitening_polynomial_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_ook_whitening_seed_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_ook_whitening_seed_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_packet_type_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_packet_type_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fallback_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fallback_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_sf_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_sf_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_bw_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_bw_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_cr_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_cr_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_lora_pkt_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_lora_pkt_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_pulse_shape_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_pulse_shape_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_preamble_detector_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_preamble_detector_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_address_filtering_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_address_filtering_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_pkt_len_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_pkt_len_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_crc_type_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_crc_type_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_fsk_dc_free_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_fsk_dc_free_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
radio_parameters_t * common_radio_parameters_init(void);
radio_parameters_t * common_radio_get_parameters(void);
void common_radio_get_lora_parameters(ral_lora_mod_params_t *lora_mod_params,ral_lora_pkt_params_t *lora_pkt_params);
void common_radio_get_gfsk_parameters(ral_gfsk_mod_params_t *gfsk_mod_params,ral_gfsk_pkt_params_t *gfsk_pkt_params);
void common_radio_get_flrc_parameters(shield_flrc_mod_params_t *flrc_mod_params,shield_flrc_pkt_params_t *flrc_pkt_params);
void common_radio_get_ook_parameters(shield_ook_mod_params_t *ook_mod_params,shield_ook_pkt_params_t *ook_pkt_params);
void common_radio_get_ook_rx_detector(shield_ook_rx_detector_t *ook_rx_detector_params);
void common_radio_get_ook_whitening_params(shield_ook_whitening_params_t *ook_whitening_params);
void common_radio_get_ook_addresses(uint32_t *node_address,uint32_t *broadcast_address);
void common_radio_get_ook_crc_params(uint32_t *crc_polynomial,uint32_t *crc_seed);
void common_radio_get_ook_syncword_params(uint8_t *syncword,uint8_t *sync_len_bits,shield_ook_syncword_bit_order_t *bit_order);
void common_radio_get_flrc_syncwords(uint8_t *flrc_syncword_1,uint8_t *flrc_syncword_2,uint8_t *flrc_syncword_3);
void common_radio_register_configuration_to_manager(configuration_manager_t *manager);
void common_radio_print_common_configuration(void);
void common_radio_print_lora_configuration(void);
void common_radio_print_ook_configuration(void);
void common_radio_print_gfsk_configuration(void);
void apps_utilities_uint_to_buf(uint8_t uint_size,uint8_t *out_buf,uint64_t uint_in);
void user_button_init(void);
_Bool get_and_clear_button_pressed(void);
void emulate_button_press(void);
void on_button_press(void *context);
demo_status_t demo_example_start(demo_t *self);
demo_status_t demo_example_stop(demo_t *self);
demo_status_t demo_example_runtime(demo_t *self);
void read_delay_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_delay_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void demo_example_register_configurations_to_manager(demo_t *self,configuration_manager_t *manager);
demo_example_t * demo_example_get_instance(void);
char * ral_lora_sf_to_str(ral_lora_sf_t sf);
char * ral_lora_bw_to_str(ral_lora_bw_t bw);
char * ral_pkt_type_to_str(ral_pkt_type_t type);
ral_status_t ral_set_standby(ral_t *radio,ral_standby_cfg_t standby_cfg);
ral_status_t ral_set_tx(ral_t *radio);
ral_status_t ral_set_rx(ral_t *radio,uint32_t timeout_in_ms);
ral_status_t ral_set_pkt_payload(ral_t *radio,uint8_t *buffer,uint16_t size);
ral_status_t ral_clear_irq_status(ral_t *radio,ral_irq_t irq);
ral_status_t ral_set_dio_irq_params(ral_t *radio,ral_irq_t irq);
void read_nb_frames_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_nb_frames_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_tx_to_tx_delay_in_ms_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_tx_to_tx_delay_in_ms_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_rx_timeout_in_ms_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_rx_timeout_in_ms_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_receiver_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_receiver_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
demo_status_t demo_per_start(demo_t *self);
void print_configuration_on_display(radio_parameters_t *radio_parameters,demo_per_t *myself);
demo_status_t demo_per_stop(demo_t *self);
demo_per_t * demo_per_get_instance(void);
void demo_per_set_as_transmitter(demo_t *self);
demo_status_t demo_per_runtime(demo_t *self);
void demo_per_show_PER(_Bool final);
void demo_per_on_tx_done(void);
void demo_per_on_rx_done(void);
void demo_per_on_rx_timeout(void);
void demo_per_on_rx_crc_error(void);
void per_reception_failure_handling(uint16_t *failure_counter);
void demo_per_register_configurations_to_manager(demo_t *self,configuration_manager_t *manager);
void demo_per_reset(void);
ral_status_t ral_set_tx(ral_t *radio);
ral_status_t ral_set_rx(ral_t *radio,uint32_t timeout_in_ms);
ral_status_t ral_set_pkt_payload(ral_t *radio,uint8_t *buffer,uint16_t size);
ral_status_t ral_clear_irq_status(ral_t *radio,ral_irq_t irq);
ral_status_t ral_set_dio_irq_params(ral_t *radio,ral_irq_t irq);
void read_prefix_size_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_prefix_size_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_sync_packet_threshold_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_sync_packet_threshold_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_delay_before_tx_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_delay_before_tx_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_delay_ping_pong_pace_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_delay_ping_pong_pace_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void read_rx_timeout_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_rx_timeout_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
demo_ping_pong_t * demo_ping_pong_get_instance(void);
demo_status_t demo_ping_pong_start(demo_t *self);
demo_status_t demo_ping_pong_runtime(demo_t *self);
void demo_ping_pong_register_configurations_to_manager(demo_t *self,configuration_manager_t *manager);
demo_status_t demo_ping_pong_stop(demo_t *self);
void demo_ping_pong_on_tx_done(void);
void demo_ping_pong_on_rx_done(void);
void demo_ping_pong_on_rx_timeout(void);
void demo_ping_pong_on_rx_crc_error(void);
void ping_pong_reception_failure_handling(void);
ral_status_t ral_wakeup(ral_t *radio);
ral_status_t ral_set_standby(ral_t *radio,ral_standby_cfg_t standby_cfg);
ral_status_t ral_set_fs(ral_t *radio);
ral_status_t ral_set_rx(ral_t *radio,uint32_t timeout_in_ms);
ral_status_t ral_set_tx_infinite_preamble(ral_t *radio);
void config_static_mode_t_write_to(configuration_item_t *self,void *val);
void config_static_mode_t_read_from(configuration_item_t *self,void *val);
configuration_item_static_mode_t *build_config_item_static_mode_t(configuration_item_static_mode_t *__return_storage_ptr__,static_mode_t default_value);
demo_status_t demo_static_mode_start(demo_t *self);
demo_status_t demo_static_mode_stop(demo_t *self);
void read_configuration_mode_from_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void write_configuration_mode_to_protobuf(configuration_item_t *item,DeviceMessage__Configuration *protobuf);
void demo_static_mode_register_configurations_to_manager(demo_t *self,configuration_manager_t *manager);
demo_static_mode_t * demo_static_mode_get_instance(void);
demo_status_t demo_static_mode_runtime(demo_t *self);
void demo_static_mode_handle_configuration_mode(demo_static_mode_t *self,static_mode_t target_mode);
char * demo_static_mode_static_mode_to_str(static_mode_t static_mode,_Bool to_small_display);
void demo_static_mode_configure_radio(shield_t *shield,static_mode_t mode);
ral_status_t ral_set_standby(ral_t *radio,ral_standby_cfg_t standby_cfg);
ral_status_t ral_set_tx_cw(ral_t *radio);
demo_status_t demo_tx_cw_start(demo_t *self);
demo_status_t demo_tx_cw_stop(demo_t *self);
demo_tx_cw_t * demo_tx_cw_get_instance(void);
demo_status_t demo_tx_cw_runtime(demo_t *self);
void demo_tx_cw_register_configurations_to_manager(demo_t *self,configuration_manager_t *manager);
void config_uint64_t_write_to(configuration_item_t *self,void *val);
void config_uint64_t_read_from(configuration_item_t *self,void *val);
configuration_item_uint64_t *build_config_item_uint64_t(configuration_item_uint64_t *__return_storage_ptr__,uint64_t default_value);
void config_uint32_t_write_to(configuration_item_t *self,void *val);
void config_uint32_t_read_from(configuration_item_t *self,void *val);
configuration_item_uint32_t *build_config_item_uint32_t(configuration_item_uint32_t *__return_storage_ptr__,uint32_t default_value);
void config_int32_t_write_to(configuration_item_t *self,void *val);
void config_int32_t_read_from(configuration_item_t *self,void *val);
configuration_item_int32_t *build_config_item_int32_t(configuration_item_int32_t *__return_storage_ptr__,int32_t default_value);
void config_uint16_t_write_to(configuration_item_t *self,void *val);
void config_uint16_t_read_from(configuration_item_t *self,void *val);
configuration_item_uint16_t *build_config_item_uint16_t(configuration_item_uint16_t *__return_storage_ptr__,uint16_t default_value);
void config_uint8_t_write_to(configuration_item_t *self,void *val);
void config_uint8_t_read_from(configuration_item_t *self,void *val);
configuration_item_uint8_t *build_config_item_uint8_t(configuration_item_uint8_t *__return_storage_ptr__,uint8_t default_value);
void config_bool_write_to(configuration_item_t *self,void *val);
void config_bool_read_from(configuration_item_t *self,void *val);
configuration_item__Bool *build_config_item__Bool(configuration_item__Bool *__return_storage_ptr__,_Bool default_value);
void config_ral_fallback_modes_t_write_to(configuration_item_t *self,void *val);
void config_ral_fallback_modes_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_fallback_modes_t *build_config_item_ral_fallback_modes_t(configuration_item_ral_fallback_modes_t *__return_storage_ptr__,ral_fallback_modes_t default_value);
void config_ral_lora_sf_t_write_to(configuration_item_t *self,void *val);
void config_ral_lora_sf_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_lora_sf_t *build_config_item_ral_lora_sf_t(configuration_item_ral_lora_sf_t *__return_storage_ptr__,ral_lora_sf_t default_value);
void config_ral_lora_bw_t_write_to(configuration_item_t *self,void *val);
void config_ral_lora_bw_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_lora_bw_t *build_config_item_ral_lora_bw_t(configuration_item_ral_lora_bw_t *__return_storage_ptr__,ral_lora_bw_t default_value);
void config_ral_lora_pkt_len_modes_t_write_to(configuration_item_t *self,void *val);
void config_ral_lora_pkt_len_modes_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_lora_pkt_len_modes_t *build_config_item_ral_lora_pkt_len_modes_t(configuration_item_ral_lora_pkt_len_modes_t *__return_storage_ptr__,ral_lora_pkt_len_modes_t default_value);
void config_ral_lora_cr_t_write_to(configuration_item_t *self,void *val);
void config_ral_lora_cr_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_lora_cr_t *build_config_item_ral_lora_cr_t(configuration_item_ral_lora_cr_t *__return_storage_ptr__,ral_lora_cr_t default_value);
void config_ral_gfsk_crc_type_t_write_to(configuration_item_t *self,void *val);
void config_ral_gfsk_crc_type_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_gfsk_crc_type_t *build_config_item_ral_gfsk_crc_type_t(configuration_item_ral_gfsk_crc_type_t *__return_storage_ptr__,ral_gfsk_crc_type_t default_value);
void config_ral_gfsk_pkt_len_modes_t_write_to(configuration_item_t *self,void *val);
void config_ral_gfsk_pkt_len_modes_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_gfsk_pkt_len_modes_t *build_config_item_ral_gfsk_pkt_len_modes_t(configuration_item_ral_gfsk_pkt_len_modes_t *__return_storage_ptr__,ral_gfsk_pkt_len_modes_t default_value);
void config_ral_gfsk_preamble_detector_t_write_to(configuration_item_t *self,void *val);
void config_ral_gfsk_preamble_detector_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_gfsk_preamble_detector_t *build_config_item_ral_gfsk_preamble_detector_t(configuration_item_ral_gfsk_preamble_detector_t *__return_storage_ptr__,ral_gfsk_preamble_detector_t default_value);
void config_ral_gfsk_pulse_shape_t_write_to(configuration_item_t *self,void *val);
void config_ral_gfsk_pulse_shape_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_gfsk_pulse_shape_t *build_config_item_ral_gfsk_pulse_shape_t(configuration_item_ral_gfsk_pulse_shape_t *__return_storage_ptr__,ral_gfsk_pulse_shape_t default_value);
void config_ral_gfsk_address_filtering_t_write_to(configuration_item_t *self,void *val);
void config_ral_gfsk_address_filtering_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_gfsk_address_filtering_t *build_config_item_ral_gfsk_address_filtering_t(configuration_item_ral_gfsk_address_filtering_t *__return_storage_ptr__,ral_gfsk_address_filtering_t default_value);
void config_ral_gfsk_dc_free_t_write_to(configuration_item_t *self,void *val);
void config_ral_gfsk_dc_free_t_read_from(configuration_item_t *self,void *val);
configuration_item_ral_gfsk_dc_free_t *build_config_item_ral_gfsk_dc_free_t(configuration_item_ral_gfsk_dc_free_t *__return_storage_ptr__,ral_gfsk_dc_free_t default_value);
void config_shield_reg_mode_t_write_to(configuration_item_t *self,void *val);
void config_shield_reg_mode_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_reg_mode_t *build_config_item_shield_reg_mode_t(configuration_item_shield_reg_mode_t *__return_storage_ptr__,shield_reg_mode_t default_value);
void config_shield_flrc_preamble_len_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_preamble_len_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_preamble_len_t *build_config_item_shield_flrc_preamble_len_t(configuration_item_shield_flrc_preamble_len_t *__return_storage_ptr__,shield_flrc_preamble_len_t default_value);
void config_shield_flrc_sync_word_len_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_sync_word_len_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_sync_word_len_t *build_config_item_shield_flrc_sync_word_len_t(configuration_item_shield_flrc_sync_word_len_t *__return_storage_ptr__,shield_flrc_sync_word_len_t default_value);
void config_shield_flrc_pkt_len_modes_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_pkt_len_modes_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_pkt_len_modes_t *build_config_item_shield_flrc_pkt_len_modes_t(configuration_item_shield_flrc_pkt_len_modes_t *__return_storage_ptr__,shield_flrc_pkt_len_modes_t default_value);
void config_shield_flrc_rx_match_sync_word_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_rx_match_sync_word_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_rx_match_sync_word_t *build_config_item_shield_flrc_rx_match_sync_word_t(configuration_item_shield_flrc_rx_match_sync_word_t *__return_storage_ptr__,shield_flrc_rx_match_sync_word_t default_value);
void config_shield_flrc_tx_sync_word_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_tx_sync_word_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_tx_sync_word_t *build_config_item_shield_flrc_tx_sync_word_t(configuration_item_shield_flrc_tx_sync_word_t *__return_storage_ptr__,shield_flrc_tx_sync_word_t default_value);
void config_shield_flrc_crc_types_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_crc_types_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_crc_types_t *build_config_item_shield_flrc_crc_types_t(configuration_item_shield_flrc_crc_types_t *__return_storage_ptr__,shield_flrc_crc_types_t default_value);
void config_shield_flrc_br_bw_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_br_bw_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_br_bw_t *build_config_item_shield_flrc_br_bw_t(configuration_item_shield_flrc_br_bw_t *__return_storage_ptr__,shield_flrc_br_bw_t default_value);
void config_shield_flrc_cr_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_cr_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_cr_t *build_config_item_shield_flrc_cr_t(configuration_item_shield_flrc_cr_t *__return_storage_ptr__,shield_flrc_cr_t default_value);
void config_shield_flrc_pulse_shape_t_write_to(configuration_item_t *self,void *val);
void config_shield_flrc_pulse_shape_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_flrc_pulse_shape_t *build_config_item_shield_flrc_pulse_shape_t(configuration_item_shield_flrc_pulse_shape_t *__return_storage_ptr__,shield_flrc_pulse_shape_t default_value);
void config_shield_packet_type_t_write_to(configuration_item_t *self,void *val);
void config_shield_packet_type_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_packet_type_t *build_config_item_shield_packet_type_t(configuration_item_shield_packet_type_t *__return_storage_ptr__,shield_packet_type_t default_value);
void config_shield_ook_pulse_shape_filter_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_pulse_shape_filter_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_pulse_shape_filter_t *build_config_item_shield_ook_pulse_shape_filter_t(configuration_item_shield_ook_pulse_shape_filter_t *__return_storage_ptr__,shield_ook_pulse_shape_filter_t default_value);
void config_shield_ook_pulse_shape_bt_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_pulse_shape_bt_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_pulse_shape_bt_t *build_config_item_shield_ook_pulse_shape_bt_t(configuration_item_shield_ook_pulse_shape_bt_t *__return_storage_ptr__,shield_ook_pulse_shape_bt_t default_value);
void config_shield_ook_mag_depth_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_mag_depth_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_mag_depth_t *build_config_item_shield_ook_mag_depth_t(configuration_item_shield_ook_mag_depth_t *__return_storage_ptr__,shield_ook_mag_depth_t default_value);
void config_shield_ook_address_filtering_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_address_filtering_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_address_filtering_t *build_config_item_shield_ook_address_filtering_t(configuration_item_shield_ook_address_filtering_t *__return_storage_ptr__,shield_ook_address_filtering_t default_value);
void config_shield_ook_header_mode_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_header_mode_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_header_mode_t *build_config_item_shield_ook_header_mode_t(configuration_item_shield_ook_header_mode_t *__return_storage_ptr__,shield_ook_header_mode_t default_value);
void config_shield_ook_crc_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_crc_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_crc_t *build_config_item_shield_ook_crc_t(configuration_item_shield_ook_crc_t *__return_storage_ptr__,shield_ook_crc_t default_value);
void config_shield_ook_encoding_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_encoding_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_encoding_t *build_config_item_shield_ook_encoding_t(configuration_item_shield_ook_encoding_t *__return_storage_ptr__,shield_ook_encoding_t default_value);
void config_shield_ook_syncword_bit_order_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_syncword_bit_order_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_syncword_bit_order_t *build_config_item_shield_ook_syncword_bit_order_t(configuration_item_shield_ook_syncword_bit_order_t *__return_storage_ptr__,shield_ook_syncword_bit_order_t default_value);
void config_shield_ook_rx_detector_sfd_type_t_write_to(configuration_item_t *self,void *val);
void config_shield_ook_rx_detector_sfd_type_t_read_from(configuration_item_t *self,void *val);
configuration_item_shield_ook_rx_detector_sfd_type_t *build_config_item_shield_ook_rx_detector_sfd_type_t(configuration_item_shield_ook_rx_detector_sfd_type_t *__return_storage_ptr__,shield_ook_rx_detector_sfd_type_t default_value);
void write_to(configuration_item_t *item,void *val);
void read_from(configuration_item_t *item,void *val);
void configuration_manager_init(configuration_manager_t *manager,hci_t *hci);
void configuration_manager_init_nvm_manager(void);
void configuration_manager_restore_from_nvm(configuration_manager_t *manager);
void configuration_manager_interpret_command(configuration_manager_t *manager,command_t *command);
_Bool append_storage_with_protobuf(configuration_manager_t *manager,configuration_item_t *item,read_from_protobuf_f read_from_protobuf,write_to_protobuf_f write_to_protobuf);
void read_from_protobuf(configuration_manager_t *manager,DeviceMessage__Configuration *protobuf);
void write_to_protobuf(configuration_manager_t *manager,DeviceMessage__Configuration *protobuf);
_Bool configuration_manager_prepare_configuration(configuration_manager_t *configuration_manager,uint8_t *buffer,uint16_t *packed_buffer_length,uint16_t max_length);
config_manager_nvm_status_type_t config_manager_nvm_init(void);
config_manager_nvm_status_type_t config_manager_nvm_store_configuration(uint8_t *buffer,uint16_t len);
config_manager_nvm_status_type_t config_manager_nvm_store_demo_to_run(uint8_t demo_id);
config_manager_nvm_status_type_t config_manager_nvm_store_running_mode(_Bool is_connected_mode);
config_manager_nvm_status_type_t config_manager_nvm_store_shield(shield_name_t shield_name);
config_manager_nvm_status_type_t config_manager_nvm_store_logs_status(uint8_t *buffer,uint16_t length);
config_manager_nvm_status_type_t config_manager_nvm_retrieve_logs_status(uint8_t *buffer,uint16_t *length);
config_manager_nvm_status_type_t config_manager_nvm_retrieve_configuration(uint8_t *buffer,uint16_t *length);
config_manager_nvm_status_type_t config_manager_nvm_retrieve_demo_to_start(uint8_t *demo_id);
config_manager_nvm_status_type_t config_manager_nvm_retrieve_shield(shield_name_t *shield_name);
config_manager_nvm_status_type_t config_manager_nvm_retrieve_running_mode(uint8_t *is_connected_mode);
config_manager_nvm_status_type_t config_manager_nvm_factory_reset(void);
config_manager_nvm_status_type_t config_manager_nvm_store(uint8_t *buffer,uint16_t len,uint16_t file_id);
config_manager_nvm_status_type_t config_manager_nvm_retrieve(uint8_t *buffer,uint16_t *len,uint16_t file_id);
void version_information_command_interpret(command_t *command,hci_t *hci);
char * display_printer_get_pkt_type_str(uint16_t pkt_type);
void display_init(void);
void display_show_logo(void);
void smtc_display_write(uint16_t address,uint8_t *tx_buf,uint16_t length);
void diagnostics_init(void);
void diagnostics_save_event(uint8_t event);
void diagnostics_save_event_with_data(uint8_t event,uint8_t *buf,uint16_t len);
uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx);
void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx,uint32_t Threshold);
void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx,uint32_t CRCPoly);
void LL_APB1_GRP1_ForceReset(uint32_t Periphs);
void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs);
void LL_APB2_GRP1_ForceReset(uint32_t Periphs);
void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs);
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx);
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx,LL_SPI_InitTypeDef *SPI_InitStruct);
void LL_I2C_Enable(I2C_TypeDef *I2Cx);
void LL_I2C_Disable(I2C_TypeDef *I2Cx);
void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx,uint32_t AnalogFilter,uint32_t DigitalFilter);
void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx,uint32_t OwnAddress1,uint32_t OwnAddrSize);
void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx);
void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx);
void LL_I2C_SetTiming(I2C_TypeDef *I2Cx,uint32_t Timing);
void LL_I2C_SetMode(I2C_TypeDef *I2Cx,uint32_t PeripheralMode);
void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx,uint32_t TypeAcknowledge);
void LL_APB1_GRP1_ForceReset(uint32_t Periphs);
void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs);
ErrorStatus LL_I2C_DeInit(I2C_TypeDef *I2Cx);
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx,LL_I2C_InitTypeDef *I2C_InitStruct);
uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx);
void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx,uint32_t StopBits);
void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx,uint32_t HardwareFlowControl);
void LL_USART_SetBaudRate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t OverSampling,uint32_t BaudRate);
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx,LL_USART_InitTypeDef *USART_InitStruct);
uint32_t LL_RCC_HSI_IsReady(void);
uint32_t LL_RCC_LSE_IsReady(void);
uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void);
uint32_t LL_RCC_MSI_GetRange(void);
uint32_t LL_RCC_MSI_GetRangeAfterStandby(void);
uint32_t LL_RCC_GetSysClkSource(void);
uint32_t LL_RCC_GetAHBPrescaler(void);
uint32_t LL_RCC_GetAPB1Prescaler(void);
uint32_t LL_RCC_GetAPB2Prescaler(void);
uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx);
uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx);
uint32_t LL_RCC_PLL_GetMainSource(void);
uint32_t LL_RCC_PLL_GetN(void);
uint32_t LL_RCC_PLL_GetR(void);
uint32_t LL_RCC_PLL_GetDivider(void);
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource);
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource);
uint32_t RCC_GetSystemClockFreq(void);
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency);
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency);
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency);
uint32_t RCC_PLL_GetFreqDomain_SYS(void);
void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Mode);
void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx,uint32_t PinMask,uint32_t OutputType);
void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Speed);
void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Pull);
void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Alternate);
void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx,uint32_t Pin,uint32_t Alternate);
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx,LL_GPIO_InitTypeDef *GPIO_InitStruct);
void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine);
void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine);
void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine);
void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine);
void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine);
void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine);
void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine);
void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine);
void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine);
void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine);
void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine);
void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine);
void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine);
void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine);
void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine);
void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine);
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct);
void LL_EXTI_StructInit(LL_EXTI_InitTypeDef *EXTI_InitStruct);
void LL_InitTick(uint32_t HCLKFrequency,uint32_t Ticks);
void LL_Init1msTick(uint32_t HCLKFrequency);
void LL_mDelay(uint32_t Delay);
void LL_SetSystemCoreClock(uint32_t HCLKFrequency);
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram,uint32_t Address,uint64_t Data);
HAL_StatusTypeDef HAL_FLASH_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_Lock(void);
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);
void FLASH_Program_DoubleWord(uint32_t Address,uint64_t Data);
void FLASH_Program_Fast(uint32_t Address,uint32_t DataAddress);
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit,uint32_t *PageError);
void FLASH_MassErase(uint32_t Banks);
void FLASH_PageErase(uint32_t Page,uint32_t Banks);
void FLASH_FlushCaches(void);
uint32_t HAL_GetTick(void);
void LL_SPI_Enable(SPI_TypeDef *SPIx);
uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx);
void LL_SPI_SetStandard(SPI_TypeDef *SPIx,uint32_t Standard);
void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx,uint32_t Threshold);
void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx);
uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx);
uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx);
uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx);
uint16_t LL_SPI_ReceiveData16(SPI_TypeDef *SPIx);
void LL_SPI_TransmitData8(SPI_TypeDef *SPIx,uint8_t TxData);
void LL_SPI_TransmitData16(SPI_TypeDef *SPIx,uint16_t TxData);
void LL_AHB2_GRP1_EnableClock(uint32_t Periphs);
void LL_APB1_GRP1_EnableClock(uint32_t Periphs);
void LL_APB2_GRP1_EnableClock(uint32_t Periphs);
uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx);
smtc_hal_mcu_status_t smtc_hal_mcu_spi_init(smtc_hal_mcu_spi_cfg_t cfg,smtc_hal_mcu_spi_cfg_app_t *cfg_app,smtc_hal_mcu_spi_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_spi_deinit(smtc_hal_mcu_spi_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_spi_rw_buffer(smtc_hal_mcu_spi_inst_t inst,uint8_t *data_out,uint8_t *data_in,uint16_t data_length);
smtc_hal_mcu_spi_inst_s * smtc_hal_mcu_spi_stm32l4_get_free_slot(void);
_Bool smtc_hal_mcu_spi_stm32l4_is_real_inst(smtc_hal_mcu_spi_inst_t inst);
uint32_t smtc_hal_mcu_spi_stm32l4_is_active_flag_tc(uint32_t channel,DMA_TypeDef *dma);
void smtc_hal_mcu_spi_stm32l4_clear_flag_gi(uint32_t channel,DMA_TypeDef *dma);
uint32_t smtc_hal_mcu_spi_stm32l4_is_active_flag_te(uint32_t channel,DMA_TypeDef *dma);
void smtc_hal_mcu_spi_stm32l4_call_dma_callback_irq(DMA_TypeDef *dma,uint32_t channel);
void DMA1_Channel2_IRQHandler(void);
void DMA1_Channel3_IRQHandler(void);
void DMA1_Channel4_IRQHandler(void);
void DMA1_Channel5_IRQHandler(void);
void DMA2_Channel1_IRQHandler(void);
void DMA2_Channel2_IRQHandler(void);
void LL_I2C_Enable(I2C_TypeDef *I2Cx);
uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx);
uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx);
uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx);
uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx);
void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx);
void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx);
void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx,uint32_t SlaveAddr,uint32_t SlaveAddrSize,uint32_t TransferSize,uint32_t EndMode,uint32_t Request);
void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx,uint8_t Data);
void LL_AHB2_GRP1_EnableClock(uint32_t Periphs);
void LL_APB1_GRP1_EnableClock(uint32_t Periphs);
void LL_RCC_SetI2CClockSource(uint32_t I2CxSource);
smtc_hal_mcu_status_t smtc_hal_mcu_i2c_init(smtc_hal_mcu_i2c_cfg_t cfg,smtc_hal_mcu_i2c_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_i2c_deinit(smtc_hal_mcu_i2c_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_i2c_write_buffer(smtc_hal_mcu_i2c_inst_t inst,smtc_hal_mcu_i2c_address_format_t address_format,uint16_t device_addr,uint8_t *data_out,uint16_t data_length);
smtc_hal_mcu_i2c_inst_s * smtc_hal_mcu_i2c_stm32l4_get_free_slot(void);
_Bool smtc_hal_mcu_i2c_stm32l4_is_real_inst(smtc_hal_mcu_i2c_inst_t inst);
int smtc_hal_mcu_i2c_stm32l4_get_address_parameter(smtc_hal_mcu_i2c_address_format_t address_format);
void __NVIC_EnableIRQ(IRQn_Type IRQn);
void __NVIC_DisableIRQ(IRQn_Type IRQn);
void __NVIC_SetPriority(IRQn_Type IRQn,uint32_t priority);
uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx,uint32_t Pin);
uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx,uint32_t PinMask);
uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx,uint32_t PinMask);
void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx,uint32_t PinMask);
void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx,uint32_t PinMask);
void LL_AHB2_GRP1_EnableClock(uint32_t Periphs);
void LL_AHB2_GRP1_DisableClock(uint32_t Periphs);
uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine);
void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine);
void LL_SYSCFG_SetEXTISource(uint32_t Port,uint32_t Line);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_init_output(smtc_hal_mcu_gpio_cfg_t cfg,smtc_hal_mcu_gpio_output_cfg_t *output_cfg,smtc_hal_mcu_gpio_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_init_input(smtc_hal_mcu_gpio_cfg_t cfg,smtc_hal_mcu_gpio_input_cfg_t *input_cfg,smtc_hal_mcu_gpio_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_deinit(smtc_hal_mcu_gpio_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_set_state(smtc_hal_mcu_gpio_inst_t inst,smtc_hal_mcu_gpio_state_t state);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_get_state(smtc_hal_mcu_gpio_inst_t inst,smtc_hal_mcu_gpio_state_t *state);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_enable_irq(smtc_hal_mcu_gpio_inst_t inst);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_disable_irq(smtc_hal_mcu_gpio_inst_t inst);
_Bool smtc_hal_mcu_gpio_stm32l4_is_configured(smtc_hal_mcu_gpio_cfg_t cfg);
smtc_hal_mcu_gpio_inst_s * smtc_hal_mcu_gpio_stm32l4_get_free_slot(void);
_Bool smtc_hal_mcu_gpio_stm32l4_is_real_inst(smtc_hal_mcu_gpio_inst_t inst);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_enable_clock(GPIO_TypeDef *port);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_disable_clock(GPIO_TypeDef *port);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_get_exti_cfg(smtc_hal_mcu_gpio_inst_t inst,smtc_hal_mcu_gpio_irq_exti_cfg_t *exti_cfg);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_get_trigger(smtc_hal_mcu_gpio_irq_mode_t mode,uint32_t *trigger);
smtc_hal_mcu_status_t smtc_hal_mcu_gpio_stm32l4_call_exti_callback(uint32_t pin);
void EXTI0_IRQHandler(void);
void EXTI1_IRQHandler(void);
void EXTI2_IRQHandler(void);
void EXTI3_IRQHandler(void);
void EXTI4_IRQHandler(void);
void EXTI9_5_IRQHandler(void);
void EXTI15_10_IRQHandler(void);
void __NVIC_EnableIRQ(IRQn_Type IRQn);
void __NVIC_SetPriority(IRQn_Type IRQn,uint32_t priority);
void LL_USART_Enable(USART_TypeDef *USARTx);
uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx);
void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx);
uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx);
void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx);
void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx);
uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx);
void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx);
void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx);
void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx);
uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx,uint32_t Direction);
uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx);
void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx);
void LL_USART_RequestTxDataFlush(USART_TypeDef *USARTx);
void LL_AHB1_GRP1_EnableClock(uint32_t Periphs);
void LL_AHB2_GRP1_EnableClock(uint32_t Periphs);
void LL_APB1_GRP1_EnableClock(uint32_t Periphs);
void LL_DMA_EnableChannel(DMA_TypeDef *DMAx,uint32_t Channel);
void LL_DMA_DisableChannel(DMA_TypeDef *DMAx,uint32_t Channel);
uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx,uint32_t Channel);
void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx,uint32_t Channel,uint32_t Configuration);
uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx,uint32_t Channel);
void LL_DMA_SetDataLength(DMA_TypeDef *DMAx,uint32_t Channel,uint32_t NbData);
void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx,uint32_t Channel,uint32_t SrcAddress,uint32_t DstAddress,uint32_t Direction);
void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx,uint32_t Channel,uint32_t PeriphRequest);
uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx);
uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx);
void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx);
void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx,uint32_t Channel);
void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx,uint32_t Channel);
smtc_hal_mcu_status_t smtc_hal_mcu_uart_init(smtc_hal_mcu_uart_cfg_t cfg,smtc_hal_mcu_uart_cfg_app_t *cfg_app,smtc_hal_mcu_uart_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_uart_dma_init(smtc_hal_mcu_uart_dma_cfg_t cfg,smtc_hal_mcu_uart_dma_cfg_app_t *cfg_app,smtc_hal_mcu_uart_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_uart_dma_send(smtc_hal_mcu_uart_inst_t inst,uint8_t *aTxBuffer,uint data_length);
smtc_hal_mcu_status_t smtc_hal_mcu_uart_dma_receive(smtc_hal_mcu_uart_inst_t inst,uint8_t *aRxBuffer,uint data_length);
smtc_hal_mcu_status_t smtc_hal_mcu_uart_dma_abort_rx(smtc_hal_mcu_uart_inst_t inst);
smtc_hal_mcu_uart_inst_s * smtc_hal_mcu_uart_stm32l4_get_free_slot(void);
_Bool smtc_hal_mcu_uart_stm32l4_is_real_inst(smtc_hal_mcu_uart_inst_t inst);
void USART2_IRQHandler(void);
void DMA1_Channel7_IRQHandler(void);
void DMA1_Channel6_IRQHandler(void);
void LL_LPTIM_ClearFlag_ARRM(LPTIM_TypeDef *LPTIMx);
uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx);
void LPTIM1_IRQHandler(void);
void LPTIM2_IRQHandler(void);
void LL_RCC_HSI_Enable(void);
uint32_t LL_RCC_HSI_IsReady(void);
void LL_RCC_HSI_SetCalibTrimming(uint32_t Value);
void LL_RCC_LSI_Enable(void);
uint32_t LL_RCC_LSI_IsReady(void);
void LL_RCC_SetSysClkSource(uint32_t Source);
uint32_t LL_RCC_GetSysClkSource(void);
void LL_RCC_SetAHBPrescaler(uint32_t Prescaler);
void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler);
void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler);
void LL_RCC_PLL_Enable(void);
uint32_t LL_RCC_PLL_IsReady(void);
void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source,uint32_t PLLM,uint32_t PLLN,uint32_t PLLR);
void LL_RCC_PLL_EnableDomain_SYS(void);
void LL_RCC_PLLSAI1_Enable(void);
uint32_t LL_RCC_PLLSAI1_IsReady(void);
void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source,uint32_t PLLM,uint32_t PLLN,uint32_t PLLQ);
void LL_RCC_PLLSAI1_EnableDomain_48M(void);
void LL_FLASH_SetLatency(uint32_t Latency);
uint32_t LL_FLASH_GetLatency(void);
void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling);
void LL_APB2_GRP1_EnableClock(uint32_t Periphs);
smtc_hal_mcu_status_t smtc_hal_mcu_init(void);
smtc_hal_mcu_status_t smtc_hal_mcu_wait_ms(uint32_t milliseconds);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_init(uint32_t start_address,uint32_t end_address,smtc_hal_mcu_nvm_inst_t *inst);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_write(smtc_hal_mcu_nvm_inst_t inst,uint32_t offset,uint8_t *buffer,uint32_t length);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_read(smtc_hal_mcu_nvm_inst_t inst,uint32_t offset,uint8_t *buffer,uint32_t length);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_erase(smtc_hal_mcu_nvm_inst_t inst,uint32_t offset,uint32_t length);
_Bool smtc_hal_mcu_nvm_stm32l4_is_valid_instance(smtc_hal_mcu_nvm_inst_t inst);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_stm32l4_unlock(void);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_stm32l4_lock(void);
_Bool smtc_hal_mcu_nvm_smt32l4_is_offset_within_bounds(smtc_hal_mcu_nvm_inst_t inst,uint32_t offset);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_stm32l4_write_doubleword(uint64_t doubleword,uint32_t address);
smtc_hal_mcu_status_t smtc_hal_mcu_nvm_stm32l4_erase_pages(uint32_t bank_number,uint32_t first_page,uint32_t pages_number);
uint64_t smtc_hal_mcu_nvm_stm32l4_create_64_bits_data(uint8_t *buf,uint8_t len);
uint32_t smtc_hal_mcu_nvm_stm32l4_get_bank_by_address(uint32_t addr);
uint32_t smtc_hal_mcu_nvm_stm32l4_get_page_by_address(uint32_t addr);
smtc_hal_mcu_nvm_inst_t smtc_hal_mcu_nvm_stm32l4_get_free_slot(void);
void SystemInit(void);
void * system_alloc(void *allocator_data,size_t size);
void system_free(void *allocator_data,void *data);
void * do_alloc(ProtobufCAllocator *allocator,size_t size);
void do_free(ProtobufCAllocator *allocator,void *data);
size_t get_tag_size(uint32_t number);
size_t uint32_size(uint32_t v);
size_t int32_size(int32_t v);
uint32_t zigzag32(int32_t v);
size_t sint32_size(int32_t v);
size_t uint64_size(uint64_t v);
uint64_t zigzag64(int64_t v);
size_t sint64_size(int64_t v);
size_t required_field_get_packed_size(ProtobufCFieldDescriptor *field,void *member);
size_t oneof_field_get_packed_size(ProtobufCFieldDescriptor *field,uint32_t oneof_case,void *member);
size_t optional_field_get_packed_size(ProtobufCFieldDescriptor *field,protobuf_c_boolean has,void *member);
protobuf_c_boolean field_is_zeroish(ProtobufCFieldDescriptor *field,void *member);
size_t unlabeled_field_get_packed_size(ProtobufCFieldDescriptor *field,void *member);
size_t repeated_field_get_packed_size(ProtobufCFieldDescriptor *field,size_t count,void *member);
size_t unknown_field_get_packed_size(ProtobufCMessageUnknownField *field);
size_t protobuf_c_message_get_packed_size(ProtobufCMessage *message);
size_t uint32_pack(uint32_t value,uint8_t *out);
size_t int32_pack(uint32_t value,uint8_t *out);
size_t sint32_pack(int32_t value,uint8_t *out);
size_t uint64_pack(uint64_t value,uint8_t *out);
size_t sint64_pack(int64_t value,uint8_t *out);
size_t fixed32_pack(uint32_t value,void *out);
size_t fixed64_pack(uint64_t value,void *out);
size_t boolean_pack(protobuf_c_boolean value,uint8_t *out);
size_t string_pack(char *str,uint8_t *out);
size_t binary_data_pack(ProtobufCBinaryData *bd,uint8_t *out);
size_t prefixed_message_pack(ProtobufCMessage *message,uint8_t *out);
size_t tag_pack(uint32_t id,uint8_t *out);
size_t required_field_pack(ProtobufCFieldDescriptor *field,void *member,uint8_t *out);
size_t oneof_field_pack(ProtobufCFieldDescriptor *field,uint32_t oneof_case,void *member,uint8_t *out);
size_t optional_field_pack(ProtobufCFieldDescriptor *field,protobuf_c_boolean has,void *member,uint8_t *out);
size_t unlabeled_field_pack(ProtobufCFieldDescriptor *field,void *member,uint8_t *out);
size_t sizeof_elt_in_repeated_array(ProtobufCType type);
void copy_to_little_endian_32(void *out,void *in,uint n);
void copy_to_little_endian_64(void *out,void *in,uint n);
uint get_type_min_size(ProtobufCType type);
size_t repeated_field_pack(ProtobufCFieldDescriptor *field,size_t count,void *member,uint8_t *out);
size_t unknown_field_pack(ProtobufCMessageUnknownField *field,uint8_t *out);
size_t protobuf_c_message_pack(ProtobufCMessage *message,uint8_t *out);
int int_range_lookup(uint n_ranges,ProtobufCIntRange *ranges,int value);
size_t parse_tag_and_wiretype(size_t len,uint8_t *data,uint32_t *tag_out,uint8_t *wiretype_out);
size_t scan_length_prefixed_data(size_t len,uint8_t *data,size_t *prefix_len_out);
size_t max_b128_numbers(size_t len,uint8_t *data);
protobuf_c_boolean merge_messages(ProtobufCMessage *earlier_msg,ProtobufCMessage *latter_msg,ProtobufCAllocator *allocator);
protobuf_c_boolean count_packed_elements(ProtobufCType type,size_t len,uint8_t *data,size_t *count_out);
uint32_t parse_uint32(uint len,uint8_t *data);
uint32_t parse_int32(uint len,uint8_t *data);
int32_t unzigzag32(uint32_t v);
uint32_t parse_fixed_uint32(uint8_t *data);
uint64_t parse_uint64(uint len,uint8_t *data);
int64_t unzigzag64(uint64_t v);
uint64_t parse_fixed_uint64(uint8_t *data);
protobuf_c_boolean parse_boolean(uint len,uint8_t *data);
protobuf_c_boolean parse_required_member(ScannedMember *scanned_member,void *member,ProtobufCAllocator *allocator,protobuf_c_boolean maybe_clear);
protobuf_c_boolean parse_oneof_member(ScannedMember *scanned_member,void *member,ProtobufCMessage *message,ProtobufCAllocator *allocator);
protobuf_c_boolean parse_optional_member(ScannedMember *scanned_member,void *member,ProtobufCMessage *message,ProtobufCAllocator *allocator);
protobuf_c_boolean parse_repeated_member(ScannedMember *scanned_member,void *member,ProtobufCMessage *message,ProtobufCAllocator *allocator);
uint scan_varint(uint len,uint8_t *data);
protobuf_c_boolean parse_packed_repeated_member(ScannedMember *scanned_member,void *member,ProtobufCMessage *message);
protobuf_c_boolean is_packable_type(ProtobufCType type);
protobuf_c_boolean parse_member(ScannedMember *scanned_member,ProtobufCMessage *message,ProtobufCAllocator *allocator);
void message_init_generic(ProtobufCMessageDescriptor *desc,ProtobufCMessage *message);
ProtobufCMessage *protobuf_c_message_unpack(ProtobufCMessageDescriptor *desc,ProtobufCAllocator *allocator,size_t len,uint8_t *data);
void protobuf_c_message_free_unpacked(ProtobufCMessage *message,ProtobufCAllocator *allocator);
void protobuf_c_message_init(ProtobufCMessageDescriptor *descriptor,void *message);
void device_message__version_information__init(DeviceMessage__VersionInformation *message);
size_t device_message__version_information__get_packed_size(DeviceMessage__VersionInformation *message);
size_t device_message__version_information__pack(DeviceMessage__VersionInformation *message,uint8_t *out);
void device_message__get_version_information__init(DeviceMessage__GetVersionInformation *message);
void device_message__log__init(DeviceMessage__Log *message);
size_t device_message__log__get_packed_size(DeviceMessage__Log *message);
size_t device_message__log__pack(DeviceMessage__Log *message,uint8_t *out);
void device_message__shields__init(DeviceMessage__Shields *message);
size_t device_message__shields__get_packed_size(DeviceMessage__Shields *message);
size_t device_message__shields__pack(DeviceMessage__Shields *message,uint8_t *out);
void device_message__configure_example__init(DeviceMessage__ConfigureExample *message);
void device_message__configure_per__init(DeviceMessage__ConfigurePer *message);
void device_message__configure_ping_pong__init(DeviceMessage__ConfigurePingPong *message);
void device_message__configure_static_mode__init(DeviceMessage__ConfigureStaticMode *message);
void device_message__configure_radio__init(DeviceMessage__ConfigureRadio *message);
void device_message__configure_application__init(DeviceMessage__ConfigureApplication *message);
void device_message__configuration__init(DeviceMessage__Configuration *message);
size_t device_message__configuration__get_packed_size(DeviceMessage__Configuration *message);
size_t device_message__configuration__pack(DeviceMessage__Configuration *message,uint8_t *out);
DeviceMessage__Configuration *device_message__configuration__unpack(ProtobufCAllocator *allocator,size_t len,uint8_t *data);
void device_message__configuration__free_unpacked(DeviceMessage__Configuration *message,ProtobufCAllocator *allocator);
void device_message__start_demo__init(DeviceMessage__StartDemo *message);
void device_message__stop_demo__init(DeviceMessage__StopDemo *message);
void device_message__get_configuration__init(DeviceMessage__GetConfiguration *message);
void device_message__shield__init(DeviceMessage__Shield *message);
size_t device_message__shield__get_packed_size(DeviceMessage__Shield *message);
size_t device_message__shield__pack(DeviceMessage__Shield *message,uint8_t *out);
void device_message__get_shield__init(DeviceMessage__GetShield *message);
void device_message__get_all_shields__init(DeviceMessage__GetAllShields *message);
void device_message__identify__init(DeviceMessage__Identify *message);
void device_message__push_button__init(DeviceMessage__PushButton *message);
void device_message__store_current_config_in_nvm__init(DeviceMessage__StoreCurrentConfigInNvm *message);
void device_message__factory_reset_nvm__init(DeviceMessage__FactoryResetNvm *message);
void device_message__load_config_from_nvm__init(DeviceMessage__LoadConfigFromNvm *message);
void device_message__set_running_mode__init(DeviceMessage__SetRunningMode *message);
void device_message__running_mode__init(DeviceMessage__RunningMode *message);
size_t device_message__running_mode__get_packed_size(DeviceMessage__RunningMode *message);
size_t device_message__running_mode__pack(DeviceMessage__RunningMode *message,uint8_t *out);
void device_message__get_running_mode__init(DeviceMessage__GetRunningMode *message);
void device_message__get_nvm_logs_size__init(DeviceMessage__GetNvmLogsSize *message);
void device_message__nvm_logs_size__init(DeviceMessage__NvmLogsSize *message);
size_t device_message__nvm_logs_size__get_packed_size(DeviceMessage__NvmLogsSize *message);
size_t device_message__nvm_logs_size__pack(DeviceMessage__NvmLogsSize *message,uint8_t *out);
void device_message__dump_nvm_logs__init(DeviceMessage__DumpNvmLogs *message);
void device_message__to_device__init(DeviceMessage__ToDevice *message);
DeviceMessage__ToDevice *device_message__to_device__unpack(ProtobufCAllocator *allocator,size_t len,uint8_t *data);
void device_message__to_device__free_unpacked(DeviceMessage__ToDevice *message,ProtobufCAllocator *allocator);
void device_message__radio_defs__lora_parameters__init(DeviceMessage__RadioDefs__LoraParameters *message);
void device_message__radio_defs__fsk_parameters__init(DeviceMessage__RadioDefs__FskParameters *message);
void device_message__radio_defs__flrc_parameters__init(DeviceMessage__RadioDefs__FlrcParameters *message);
void device_message__radio_defs_ook__ook_parameters__init(DeviceMessage__RadioDefsOok__OokParameters *message);
ral_status_t ral_set_sleep(ral_t *radio,_Bool retain_config);
ral_status_t ral_cfg_rx_boosted(ral_t *radio,_Bool enable_boost_mode);
ral_status_t ral_set_tx_cfg(ral_t *radio,int8_t output_pwr_in_dbm,uint32_t rf_freq_in_hz);
ral_status_t ral_set_pkt_type(ral_t *radio,ral_pkt_type_t pkt_type);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr11xx_get_rf_switch_cfg(smtc_shield_lr11xx_t *shield);
lr11xx_system_reg_mode_t smtc_shield_lr11xx_get_reg_mode(smtc_shield_lr11xx_t *shield);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr11xx_get_xosc_cfg(smtc_shield_lr11xx_t *shield);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr11xx_get_lfclk_cfg(smtc_shield_lr11xx_t *shield);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr11xx_get_pinout(smtc_shield_lr11xx_t *shield);
lr11xx_shield_t *lr11xx_shield_get_instance(lr11xx_shield_t *__return_storage_ptr__,smtc_shield_lr11xx_t lr11xx_shield_specific);
shield_status_t lr11xx_shield_system_init(shield_t *self);
void lr11xx_shield_init(shield_t *self,_func_void_void_ptr *callback);
void lr11xx_shield_deinit(shield_t *self);
void lr11xx_shield_init_context(lr11xx_hal_context_t *context,_func_void_void_ptr *callback);
void lr11xx_shield_deinit_context(lr11xx_hal_context_t *context);
void lr11xx_shield_init_identification(shield_t *self);
ral_t * lr11xx_shield_get_ral_instance(shield_t *self);
void lr11xx_shield_handle_pre_rx(shield_t *self);
void lr11xx_shield_handle_post_rx(shield_t *self);
void lr11xx_shield_handle_pre_tx(shield_t *self);
void lr11xx_shield_handle_post_tx(shield_t *self);
shield_status_t lr11xx_shield_set_pkt_type(shield_t *self,ral_t *radio,shield_packet_type_t packet_type);
shield_status_t lr11xx_shield_set_chip_patch(shield_t *shield);
shield_status_t lr11xx_shield_set_ook_detection_level(shield_t *shield,int16_t threshold_level_db);
shield_status_t lr11xx_shield_configure_and_get_inst_rssi(shield_t *self,int16_t *inst_rssi);
shield_status_t lr11xx_shield_set_flrc_syncword(shield_t *self,uint8_t *syncword,uint8_t syncword_index,uint8_t syncword_len);
shield_status_t lr11xx_shield_set_flrc_pkt_params(shield_t *self,shield_flrc_pkt_params_t *flrc_pkt_params);
shield_status_t lr11xx_shield_set_flrc_mod_params(shield_t *self,shield_flrc_mod_params_t *flrc_mod_params);
shield_status_t lr11xx_shield_set_ook_pkt_params(shield_t *self,shield_ook_pkt_params_t *ook_pkt_params,_Bool apply_workaround);
shield_status_t lr11xx_shield_set_ook_mod_params(shield_t *self,shield_ook_mod_params_t *ook_mod_params);
shield_status_t lr11xx_shield_set_ook_crc_params(shield_t *self,uint32_t polynomial,uint32_t seed);
shield_status_t lr11xx_shield_set_ook_set_syncword(shield_t *self,uint8_t *syncword,uint8_t sync_len,uint8_t sync_len_bits,shield_ook_syncword_bit_order_t bit_order);
shield_status_t lr11xx_shield_set_ook_set_addresses(shield_t *self,uint32_t node_address,uint32_t broadcast_address);
shield_status_t lr11xx_shield_set_ook_set_whitening_params(shield_t *self,shield_ook_whitening_params_t *whitening_params);
shield_status_t lr11xx_shield_set_ook_rx_detector(shield_t *self,shield_ook_rx_detector_t *rx_detector_params);
void lr11xx_shield_identify(shield_t *self);
_Bool lr11xx_is_identification_running(shield_t *self);
void lr11xx_shield_runtime(shield_t *self);
shield_status_t lr11xx_shield_set_tx_cfg(shield_t *self,int32_t power_in_half_dbm,uint32_t frequency);
shield_status_t lr11xx_shield_set_rx_boost_mode(shield_t *shield,_Bool rx_boost,uint32_t frequency);
shield_status_t lr11xx_shield_set_sleep(shield_t *self,_Bool retain_data,_Bool retain_rtc);
ral_status_t ral_set_pkt_type(ral_t *radio,ral_pkt_type_t pkt_type);
smtc_shield_lr20xx_pa_pwr_cfg_t *smtc_shield_lr20xx_get_pa_pwr_cfg(smtc_shield_lr20xx_t *shield,uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_half_dbm);
lr20xx_system_dio_rf_switch_cfg_t *smtc_shield_lr20xx_get_rf_switch_cfg(smtc_shield_lr20xx_t *shield,lr20xx_system_dio_t dio);
lr20xx_system_dio_drive_t smtc_shield_lr20xx_get_dio_sleep_drive(smtc_shield_lr20xx_t *shield,lr20xx_system_dio_t dio);
lr20xx_system_dio_func_t smtc_shield_lr20xx_get_dio_function(smtc_shield_lr20xx_t *shield,lr20xx_system_dio_t dio);
smtc_shield_lr20xx_xosc_cfg_t * smtc_shield_lr20xx_get_xosc_cfg(smtc_shield_lr20xx_t *shield);
lr20xx_system_lfclk_cfg_t smtc_shield_lr20xx_get_lfclk_cfg(smtc_shield_lr20xx_t *shield);
smtc_shield_lr20xx_pinout_t * smtc_shield_lr20xx_get_pinout(smtc_shield_lr20xx_t *shield);
lr20xx_shield_t *lr20xx_shield_get_instance(lr20xx_shield_t *__return_storage_ptr__,smtc_shield_lr20xx_t lr20xx_shield_specific);
lr20xx_status_t lr20xx_shield_check_chip_version(lr20xx_shield_t *shield);
shield_status_t lr20xx_shield_system_init(shield_t *self);
void lr20xx_shield_init(shield_t *self,_func_void_void_ptr *callback);
void lr20xx_shield_deinit(shield_t *self);
void lr20xx_shield_init_context(lr20xx_hal_context_t *context,smtc_shield_lr20xx_pinout_t *shield_pinout,_func_void_void_ptr *callback);
void lr20xx_shield_deinit_context(lr20xx_hal_context_t *context);
void lr20xx_shield_init_identification(shield_t *self);
ral_t * lr20xx_shield_get_ral_instance(shield_t *self);
void lr20xx_shield_handle_pre_rx(shield_t *self);
void lr20xx_shield_handle_post_rx(shield_t *self);
void lr20xx_shield_handle_pre_tx(shield_t *self);
void lr20xx_shield_handle_post_tx(shield_t *self);
shield_status_t lr20xx_shield_set_chip_patch(shield_t *self);
shield_status_t lr20xx_shield_set_flrc_syncword(shield_t *self,uint8_t *syncword,uint8_t syncword_index,uint8_t syncword_len);
shield_status_t lr20xx_shield_set_ook_detection_level(shield_t *shield,int16_t threshold_level_db);
shield_status_t lr20xx_shield_configure_and_get_inst_rssi(shield_t *self,int16_t *inst_rssi);
shield_status_t lr20xx_shield_set_flrc_pkt_params(shield_t *self,shield_flrc_pkt_params_t *flrc_pkt_params);
shield_status_t lr20xx_shield_set_flrc_mod_params(shield_t *self,shield_flrc_mod_params_t *flrc_mod_params);
shield_status_t lr20xx_shield_set_ook_pkt_params(shield_t *self,shield_ook_pkt_params_t *ook_pkt_params,_Bool apply_workaround);
shield_status_t lr20xx_shield_set_ook_mod_params(shield_t *self,shield_ook_mod_params_t *ook_mod_params);
shield_status_t lr20xx_shield_set_ook_crc_params(shield_t *self,uint32_t polynomial,uint32_t seed);
shield_status_t lr20xx_shield_set_ook_set_syncword(shield_t *self,uint8_t *syncword,uint8_t sync_len,uint8_t sync_len_bits,shield_ook_syncword_bit_order_t bit_order);
shield_status_t lr20xx_shield_set_ook_set_addresses(shield_t *self,uint32_t node_address,uint32_t broadcast_address);
shield_status_t lr20xx_shield_set_ook_set_whitening_params(shield_t *self,shield_ook_whitening_params_t *whitening_params);
shield_status_t lr20xx_shield_set_ook_rx_detector(shield_t *self,shield_ook_rx_detector_t *rx_detector_params);
lr20xx_radio_common_pkt_type_t shield_pkt_type_to_lr20xx_pkt_type(shield_packet_type_t shield_pkt_type);
void lr20xx_shield_identify(shield_t *self);
_Bool lr20xx_is_identification_running(shield_t *self);
shield_status_t lr20xx_shield_set_pkt_type(shield_t *self,ral_t *radio,shield_packet_type_t packet_type);
void lr20xx_shield_runtime(shield_t *self);
shield_status_t lr20xx_shield_set_tx_cfg(shield_t *self,int32_t output_power_in_half_dbm,uint32_t frequency);
shield_status_t lr20xx_shield_set_sleep(shield_t *self,_Bool retain_data,_Bool retain_rtc);
shield_status_t lr20xx_shield_set_rx_boost_mode(shield_t *shield,_Bool boost_mode_enable,uint32_t frequency);
shield_status_t lr20xx_shield_lr20xx_get_reg_mode(shield_t *self,shield_reg_mode_t *regulator_mode);
shield_status_t lr20xx_shield_lr20xx_set_reg_mode(shield_t *self,shield_reg_mode_t regulator_mode);
radioless_shield_t * radioless_shield_get_instance(void);
shield_status_t radioless_shield_system_init(shield_t *self);
void radioless_shield_init(shield_t *self,_func_void_void_ptr *callback);
void radioless_shield_deinit(shield_t *self);
void radioless_shield_identify(shield_t *self);
void radioless_shield_init_identification(shield_t *self);
_Bool dummy_is_identification_running(shield_t *self);
void radioless_shield_runtime(shield_t *self);
ral_t * radioless_shield_get_ral_instance(shield_t *self);
void radioless_shield_handle_pre_rx(shield_t *self);
void radioless_shield_handle_post_rx(shield_t *self);
void radioless_shield_handle_pre_tx(shield_t *self);
void radioless_shield_handle_post_tx(shield_t *self);
shield_status_t radioless_shield_set_tx_cfg(shield_t *self,int32_t power_in_half_dbm,uint32_t frquency);
shield_status_t radioless_shield_set_rx_boost_mode(shield_t *shield,_Bool rx_boost,uint32_t frequency);
shield_status_t radioless_shield_set_sleep(shield_t *shield,_Bool retain_data,_Bool retain_rtc);
shield_status_t shield_system_init(shield_t *shield);
void shield_init(shield_t *shield,_func_void_void_ptr *callback);
void shield_deinit(shield_t *shield);
ral_t * shield_get_ral_instance(shield_t *shield);
void shield_handle_pre_rx(shield_t *shield);
void shield_handle_post_rx(shield_t *shield);
void shield_handle_pre_tx(shield_t *shield);
void shield_handle_post_tx(shield_t *shield);
void shield_identify(shield_t *shield);
void shield_runtime(shield_t *shield);
shield_status_t shield_set_tx_cfg(shield_t *shield,int32_t power_in_half_dbm,uint32_t frequency);
shield_status_t shield_set_sleep(shield_t *shield,_Bool retain_data,_Bool retain_rtc);
shield_status_t shield_set_rx_boost_mode(shield_t *shield,_Bool rx_boost,uint32_t frequency);
shield_status_t shield_set_flrc_syncword(shield_t *shield,uint8_t *syncword,uint8_t syncword_index,uint8_t syncword_len);
shield_status_t shield_set_flrc_pkt_params(shield_t *shield,shield_flrc_pkt_params_t *flrc_pkt_params);
shield_status_t shield_set_flrc_mod_params(shield_t *shield,shield_flrc_mod_params_t *flrc_mod_params);
shield_status_t shield_set_ook_pkt_params(shield_t *shield,shield_ook_pkt_params_t *ook_pkt_params,_Bool apply_workaround);
shield_status_t shield_set_ook_mod_params(shield_t *shield,shield_ook_mod_params_t *ook_mod_params);
shield_status_t shield_set_ook_syncword(shield_t *shield,uint8_t *syncword,uint8_t sync_len,uint8_t sync_len_bits,shield_ook_syncword_bit_order_t bit_order);
shield_status_t shield_set_ook_set_addresses(shield_t *shield,uint32_t node_address,uint32_t broadcast_address);
shield_status_t shield_set_ook_set_whitening_params(shield_t *shield,shield_ook_whitening_params_t *whitening_params);
shield_status_t shield_set_ook_rx_detector(shield_t *shield,shield_ook_rx_detector_t *rx_detector_params);
shield_status_t shield_set_pkt_type(shield_t *shield,ral_t *radio,shield_packet_type_t packet_type);
shield_status_t shield_configure_and_get_inst_rssi(shield_t *shield,int16_t *inst_rssi);
shield_status_t shield_set_ook_detection_level(shield_t *shield,int16_t threshold_level_db);
shield_status_t shield_set_reg_mode(shield_t *shield,shield_reg_mode_t reg_mode);
void shield_manager_init(hci_t *hci);
shield_t * shield_manager_get_current_shield(void);
shield_name_t shield_manager_get_current_shield_name(void);
void shield_manager_change_to_new_shield(shield_name_t identifier);
void shield_manager_interpret_command(command_t *command);
void shield_manager_runtime(void);
void shield_manager_restore_shield_from_nvm(void);
uint8_t get_fallback_default_shield(config_manager_nvm_status_type_t status);
void shield_manager_register_shields(void);
void shield_manager_register_lr11xx_shields(void);
_Bool shield_manager_register_shield(shield_name_t identifier,shield_t *shield);
void shield_manager_register_rigi_shields(void);
shield_manager_shield_registry_item_t *shield_manager_get_shield_from_identifier(shield_name_t identifier);
void shield_manager_register_radioless_shield(void);
_Bool shield_manager_prepare_get_shield(uint8_t *buffer,uint16_t *packed_buffer_length,uint16_t max_length);
_Bool shield_manager_prepare_get_shields(uint8_t *buffer,uint16_t *packed_buffer_length,uint16_t max_length);
_Bool shield_manager_shield_name_to_proto_value(shield_name_t shield_name,DeviceMessage__ShieldValue *value);
lr11xx_hal_status_t lr11xx_hal_reset(void *context);
lr11xx_hal_status_t lr11xx_hal_wakeup(void *context);
lr11xx_hal_status_t lr11xx_hal_write(void *context,uint8_t *command,uint16_t command_length,uint8_t *data,uint16_t data_length);
lr11xx_hal_status_t lr11xx_hal_read(void *context,uint8_t *command,uint16_t command_length,uint8_t *data,uint16_t data_length);
lr11xx_hal_status_t lr11xx_hal_direct_read(void *radio,uint8_t *data,uint16_t data_length);
void lr11xx_hal_wait_on_busy(void *radio);
void ral_lr11xx_bsp_get_reg_mode(void *context,lr11xx_system_reg_mode_t *reg_mode);
void ral_lr11xx_bsp_get_rf_switch_cfg(void *context,lr11xx_system_rfswitch_cfg_t *rf_switch_cfg);
void ral_lr11xx_bsp_get_tx_cfg(void *context,ral_lr11xx_bsp_tx_cfg_input_params_t *input_params,ral_lr11xx_bsp_tx_cfg_output_params_t *output_params);
void ral_lr11xx_bsp_get_xosc_cfg(void *context,ral_xosc_cfg_t *xosc_cfg,lr11xx_system_tcxo_supply_voltage_t *supply_voltage,uint32_t *startup_time_in_tick);
void ral_lr11xx_bsp_get_crc_state(void *context,_Bool *crc_is_activated);
void ral_lr11xx_bsp_get_rssi_calibration_table(void *context,uint32_t freq_in_hz,lr11xx_radio_rssi_calibration_table_t *rssi_calibration_table);
void ral_lr11xx_bsp_get_lora_cad_det_peak(void *context,ral_lora_sf_t sf,ral_lora_bw_t bw,ral_lora_cad_symbs_t nb_symbol,uint8_t *in_out_cad_det_peak);
void ral_lr11xx_bsp_get_rx_boost_cfg(void *context,_Bool *rx_boost_is_activated);
void ral_lr11xx_bsp_get_lfclk_cfg_in_sleep(void *context,_Bool *lfclk_is_running);
ral_status_t ral_lr11xx_bsp_get_instantaneous_tx_power_consumption(void *context,ral_lr11xx_bsp_tx_cfg_output_params_t *tx_cfg,lr11xx_system_reg_mode_t radio_reg_mode,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr11xx_bsp_get_instantaneous_gfsk_rx_power_consumption(void *context,lr11xx_system_reg_mode_t radio_reg_mode,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr11xx_bsp_get_instantaneous_lora_rx_power_consumption(void *context,lr11xx_system_reg_mode_t radio_reg_mode,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
void ral_lr20xx_bsp_get_front_end_calibration_cfg(void *context,lr20xx_radio_common_front_end_calibration_value_t *front_end_calibration_structures);
void ral_lr20xx_bsp_get_tx_cfg(void *context,ral_lr20xx_bsp_tx_cfg_input_params_t *input_params,ral_lr20xx_bsp_tx_cfg_output_params_t *output_params);
void ral_lr20xx_bsp_get_dio_rf_switch_cfg(void *context,lr20xx_system_dio_t dio,lr20xx_system_dio_rf_switch_cfg_t *rf_switch_cfg);
void ral_lr20xx_bsp_get_reg_mode(void *context,lr20xx_system_reg_mode_t *reg_mode);
void ral_bsp_lr20xx_get_lfclk_cfg(void *context,lr20xx_system_lfclk_cfg_t *lfclk_cfg);
void ral_lr20xx_bsp_get_xosc_cfg(void *context,ral_xosc_cfg_t *xosc_cfg,lr20xx_system_tcxo_supply_voltage_t *tcxo_supply_voltage,uint32_t *startup_time_in_tick);
void ral_lr20xx_bsp_get_dio_function(void *context,lr20xx_system_dio_t dio,lr20xx_system_dio_func_t *function);
void ral_lr20xx_bsp_get_dio_sleep_drive(void *context,lr20xx_system_dio_t dio,lr20xx_system_dio_drive_t *drive);
void ral_lr20xx_bsp_get_dio_irq_mask(void *context,lr20xx_system_dio_t dio,lr20xx_system_irq_mask_t *irq_mask);
void ral_lr20xx_bsp_get_dio_hf_clk_scaling_cfg(void *context,lr20xx_system_hf_clk_scaling_t *hf_clk_scaling);
void ral_lr20xx_bsp_get_rx_cfg(void *context,uint32_t freq_in_hz,lr20xx_radio_common_rx_path_t *rx_path,lr20xx_radio_common_rx_path_boost_mode_t *boost_mode);
void ral_lr20xx_bsp_get_lora_cad_det_peak(void *context,ral_lora_sf_t sf,ral_lora_cad_symbs_t nb_symbol,uint8_t *in_out_cad_det_peak);
ral_status_t ral_lr20xx_bsp_get_instantaneous_lora_rx_power_consumption(void *context,lr20xx_system_reg_mode_t radio_reg_mode,ral_lora_bw_t bw,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr20xx_bsp_get_instantaneous_tx_power_consumption(void *context,ral_lr20xx_bsp_tx_cfg_output_params_t *tx_cfg,lr20xx_system_reg_mode_t radio_reg_mode,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr20xx_bsp_get_instantaneous_gfsk_rx_power_consumption(void *context,lr20xx_system_reg_mode_t radio_reg_mode,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
lr20xx_hal_status_t lr20xx_hal_reset(void *context);
lr20xx_hal_status_t lr20xx_hal_wakeup(void *context);
lr20xx_hal_status_t lr20xx_hal_write(void *context,uint8_t *command,uint16_t command_length,uint8_t *data,uint16_t data_length);
lr20xx_hal_status_t lr20xx_hal_read(void *context,uint8_t *command,uint16_t command_length,uint8_t *data,uint16_t data_length);
lr20xx_hal_status_t lr20xx_hal_direct_read_fifo(void *radio,uint8_t *command,uint16_t command_length,uint8_t *data,uint16_t data_length);
lr20xx_hal_status_t lr20xx_hal_direct_read(void *radio,uint8_t *data,uint16_t data_length);
void lr20xx_hal_wait_on_busy(void *radio);
nvm_manager_status_type_t nvm_manager_check_if_enough_free_space(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t data_len);
nvm_manager_status_type_t nvm_manager_nvm_get_stored_data_size(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t *len,uint16_t *nb_files);
nvm_manager_status_type_t nvm_manager_nvm_read(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint8_t *data,uint16_t *len);
nvm_manager_status_type_t nvm_manager_nvm_factory_reset(smtc_hal_mcu_nvm_inst_t nvm_instance);
uint32_t nvm_manager_get_nvm_user_size(smtc_hal_mcu_nvm_inst_t nvm_instance);
nvm_manager_status_type_t nvm_manager_nvm_replace(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint8_t *data,uint16_t len);
nvm_manager_status_type_t nvm_manager_nvm_write(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint8_t *data,uint16_t len);
nvm_manager_status_type_t nvm_manager_nvm_write_replace(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint8_t *data,uint16_t len,_Bool replace);
nvm_manager_status_type_t nvm_manager_find_file(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint32_t *offset);
nvm_manager_status_type_t nvm_manager_nvm_init(smtc_hal_mcu_nvm_inst_t *nvm_instance,uint32_t start_addr,uint32_t end_addr);
uint16_t nvm_manager_calc_chksum(uint8_t *buf,uint32_t len);
nvm_manager_status_type_t nvm_manager_write_header(smtc_hal_mcu_nvm_inst_t nvm_instance,nvm_header_t *header,uint32_t offset);
nvm_manager_status_type_t nvm_manager_check_if_enough_trail_space(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t len);
nvm_manager_status_type_t nvm_manager_get_trail_space_left(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t *free_bytes_num);
nvm_manager_status_type_t nvm_manager_calc_free_space(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t *free_space,uint16_t *available_ids_num);
nvm_manager_status_type_t nvm_manager_nvm_defrag(smtc_hal_mcu_nvm_inst_t nvm_instance);
nvm_manager_status_type_t nvm_manager_delete_nvm_page_if_not_empty(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t page_offset);
nvm_manager_status_type_t nvm_manager_is_nvm_page_empty(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t page_offset,_Bool *is_page_empty);
nvm_manager_status_type_t nvm_manager_create_memory_map(smtc_hal_mcu_nvm_inst_t nvm_instance,found_headers_with_addr_t *found_headers_with_addr,uint16_t *len);
nvm_manager_status_type_t nvm_manager_get_next_file_relative_addr(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t start_addr,uint32_t *offset);
nvm_manager_status_type_t nvm_manager_store_found_header(nvm_header_t *nvm_header,found_headers_with_addr_t *found_headers_with_addr,uint32_t offset,_Bool *new_stored);
nvm_manager_status_type_t nvm_manager_verify_checksum(uint8_t *data,uint16_t len,uint16_t read_checksum);
_Bool nvm_manager_is_offset_within_bounds(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t offset);
nvm_manager_status_type_t nvm_manager_get_first_available_relative_addr(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t *last_addr);
_Bool nvm_manager_check_for_data_already_stored(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint8_t *data,uint16_t len);
uint32_t nvm_manager_right_align_addr(uint32_t offset);
uint32_t nvm_manager_64bits_right_align_addr(uint32_t offset);
nvm_manager_status_type_t nvm_manager_read_header(smtc_hal_mcu_nvm_inst_t nvm_instance,uint32_t offset,nvm_header_t *header);
nvm_manager_status_type_t nvm_manager_get_file(smtc_hal_mcu_nvm_inst_t nvm_instance,uint16_t id,uint32_t *offset,nvm_header_t *header);
void smtc_display_init(void);
void smtc_display_render(void);
void smtc_display_clear(void);
void smtc_display_set_x(uint16_t x);
void smtc_display_set_y(uint16_t y);
void smtc_display_goto_x_y(uint16_t x,uint16_t y);
uint8_t GLCD_GetX(void);
void smtc_display_set_pixels(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint32_t color);
void smtc_display_draw_bitmap(uint8_t *bitmap,uint8_t Width,uint8_t Height,void *app_params);
void smtc_display_fill_screen(uint16_t color);
void smtc_display_draw_filled_rectangle(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint32_t color);
void smtc_display_set_font(uint8_t *name,uint8_t width,uint8_t height,void *app_params);
void GLCD_PrintChar(char character);
void smtc_display_print_format_string(uint16_t x,uint16_t y,char *format,...);
void ssd1306_print_string(char *text);
char pgm_read_byte(char *address);
void ssd1306_send(uint8_t control,uint8_t *data,uint8_t length);
void ssd1306_buffer_write(uint8_t x,uint8_t y,uint8_t data);
uint8_t ssd1306_buffer_read(uint8_t x,uint8_t y);
void ssd1306_send_command(uint8_t command);
void support_spi_init(smtc_hal_mcu_spi_inst_t *spi_com_instance,smtc_shield_lr20xx_pinout_t *shield_pinout);
void support_i2c_init(smtc_hal_mcu_i2c_inst_t *i2c_com_instance);
void support_i2c_deinit(smtc_hal_mcu_i2c_inst_t *i2c_com_instance);
smtc_hal_mcu_status_t support_uart_init(_func_void *callback_rx,_func_void *callback_tx,_func_void *callback_error_rx,_func_void *callback_error_tx);
smtc_hal_mcu_gpio_cfg_t smtc_shield_pinout_mapping_get_gpio_cfg(smtc_shield_pinout_t gpio);
void board_init_leds(smtc_hal_mcu_gpio_inst_t *led_rx_inst,smtc_hal_mcu_gpio_inst_t *led_tx_inst);
void board_post_rx_led_trigger(smtc_hal_mcu_gpio_inst_t led_rx_inst);
void board_post_tx_led_trigger(smtc_hal_mcu_gpio_inst_t led_tx_inst);
void board_pre_rx_led_trigger(smtc_hal_mcu_gpio_inst_t led_rx_inst);
void board_pre_tx_led_trigger(smtc_hal_mcu_gpio_inst_t led_tx_inst);
void LL_SYSTICK_EnableIT(void);
void support_timing_init(void);
uint32_t support_timing_get_time(void);
void SysTick_Handler(void);
void system_time_IncreaseTicker(void);
uint32_t system_time_GetTicker(void);
void smtc_hal_button_init_user_btn(_func_void_void_ptr *callback,void *context);
void user_button_enable(void);
void user_button_disable(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr11x0_common_get_xosc_cfg(void);
_Bool smtc_shield_lr11x0_common_rttof_recommended_rx_tx_delay_indicator(uint32_t rf_freq_in_hz,lr11xx_radio_lora_bw_t bw,lr11xx_radio_lora_sf_t sf,uint32_t *delay_indicator);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr11x1_common_get_xosc_cfg(void);
_Bool smtc_shield_lr11x1_common_rttof_recommended_rx_tx_delay_indicator(uint32_t rf_freq_in_hz,lr11xx_radio_lora_bw_t bw,lr11xx_radio_lora_sf_t sf,uint32_t *delay_indicator);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr11xx_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr11xx_common_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr11xx_common_get_reg_mode(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr11xx_common_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr11xx_common_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1110mb1dxs_common_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1110mb1gxs_common_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1120mb1dxs_common_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_status_t lr11xx_system_get_irq_status(void *context,lr11xx_system_irq_mask_t *irq_status);
lr11xx_status_t lr11xx_system_reset(void *context);
lr11xx_status_t lr11xx_system_get_status(void *context,lr11xx_system_stat1_t *stat1,lr11xx_system_stat2_t *stat2,lr11xx_system_irq_mask_t *irq_status);
lr11xx_status_t lr11xx_system_get_errors(void *context,lr11xx_system_errors_t *errors);
lr11xx_status_t lr11xx_system_clear_errors(void *context);
lr11xx_status_t lr11xx_system_calibrate(void *context,uint8_t calib_param);
lr11xx_status_t lr11xx_system_set_reg_mode(void *context,lr11xx_system_reg_mode_t reg_mode);
lr11xx_status_t lr11xx_system_calibrate_image(void *context,uint8_t freq1,uint8_t freq2);
lr11xx_status_t lr11xx_system_calibrate_image_in_mhz(void *context,uint16_t freq1_in_mhz,uint16_t freq2_in_mhz);
lr11xx_status_t lr11xx_system_set_dio_as_rf_switch(void *context,lr11xx_system_rfswitch_cfg_t *rf_switch_cfg);
lr11xx_status_t lr11xx_system_set_dio_irq_params(void *context,lr11xx_system_irq_mask_t irqs_to_enable_dio1,lr11xx_system_irq_mask_t irqs_to_enable_dio2);
lr11xx_status_t lr11xx_system_clear_irq_status(void *context,lr11xx_system_irq_mask_t irqs_to_clear);
lr11xx_status_t lr11xx_system_get_and_clear_irq_status(void *context,lr11xx_system_irq_mask_t *irq);
lr11xx_status_t lr11xx_system_cfg_lfclk(void *context,lr11xx_system_lfclk_cfg_t lfclock_cfg,_Bool wait_for_32k_ready);
lr11xx_status_t lr11xx_system_set_tcxo_mode(void *context,lr11xx_system_tcxo_supply_voltage_t tune,uint32_t timeout);
lr11xx_status_t lr11xx_system_set_sleep(void *context,lr11xx_system_sleep_cfg_t sleep_cfg,uint32_t sleep_time);
lr11xx_status_t lr11xx_system_set_standby(void *context,lr11xx_system_standby_cfg_t standby_cfg);
lr11xx_status_t lr11xx_system_wakeup(void *context);
lr11xx_status_t lr11xx_system_set_fs(void *context);
lr11xx_status_t lr11xx_system_get_random_number(void *context,uint32_t *random_number);
lr11xx_status_t lr11xx_system_enable_spi_crc(void *context,_Bool enable_crc);
void lr11xx_system_convert_stat1_byte_to_enum(uint8_t stat1_byte,lr11xx_system_stat1_t *stat1);
void lr11xx_system_convert_stat2_byte_to_enum(uint8_t stat2_byte,lr11xx_system_stat2_t *stat2);
lr11xx_status_t lr11xx_radio_get_pkt_type(void *context,lr11xx_radio_pkt_type_t *pkt_type);
lr11xx_status_t lr11xx_radio_get_rx_buffer_status(void *context,lr11xx_radio_rx_buffer_status_t *rx_buffer_status);
lr11xx_status_t lr11xx_radio_get_gfsk_pkt_status(void *context,lr11xx_radio_pkt_status_gfsk_t *pkt_status);
lr11xx_status_t lr11xx_radio_get_lora_pkt_status(void *context,lr11xx_radio_pkt_status_lora_t *pkt_status);
lr11xx_status_t lr11xx_radio_get_rssi_inst(void *context,int8_t *rssi_in_dbm);
lr11xx_status_t lr11xx_radio_set_gfsk_sync_word(void *context,uint8_t *gfsk_sync_word);
lr11xx_status_t lr11xx_radio_set_lora_sync_word(void *context,uint8_t sync_word);
lr11xx_status_t lr11xx_radio_set_lr_fhss_sync_word(void *context,uint8_t *sync_word);
lr11xx_status_t lr11xx_radio_set_rx(void *context,uint32_t timeout_in_ms);
lr11xx_status_t lr11xx_radio_set_rx_with_timeout_in_rtc_step(void *context,uint32_t timeout_in_ms);
lr11xx_status_t lr11xx_radio_set_rx_with_timeout_in_rtc_step_and_lna_mode(void *context,uint32_t timeout,lr11xx_radio_lna_mode_t lna_mode);
lr11xx_status_t lr11xx_radio_set_tx(void *context,uint32_t timeout_in_ms);
lr11xx_status_t lr11xx_radio_set_tx_with_timeout_in_rtc_step(void *context,uint32_t timeout_in_rtc_step);
lr11xx_status_t lr11xx_radio_set_rf_freq(void *context,uint32_t freq_in_hz);
lr11xx_status_t lr11xx_radio_set_cad_params(void *context,lr11xx_radio_cad_params_t *cad_params);
lr11xx_status_t lr11xx_radio_set_pkt_type(void *context,lr11xx_radio_pkt_type_t pkt_type);
lr11xx_status_t lr11xx_radio_set_gfsk_mod_params(void *context,lr11xx_radio_mod_params_gfsk_t *mod_params);
lr11xx_status_t lr11xx_radio_set_lora_mod_params(void *context,lr11xx_radio_mod_params_lora_t *mod_params);
lr11xx_status_t lr11xx_radio_set_lr_fhss_mod_params(void *radio,lr11xx_radio_mod_params_lr_fhss_t *mod_params);
lr11xx_status_t lr11xx_radio_set_gfsk_pkt_params(void *context,lr11xx_radio_pkt_params_gfsk_t *pkt_params);
lr11xx_status_t lr11xx_radio_set_lora_pkt_params(void *context,lr11xx_radio_pkt_params_lora_t *pkt_params);
lr11xx_status_t lr11xx_radio_set_tx_params(void *context,int8_t pwr_in_dbm,lr11xx_radio_ramp_time_t ramp_time);
lr11xx_status_t lr11xx_radio_set_rx_tx_fallback_mode(void *context,lr11xx_radio_fallback_modes_t fallback_mode);
lr11xx_status_t lr11xx_radio_set_rx_duty_cycle(void *context,uint32_t rx_period_in_ms,uint32_t sleep_period_in_ms,lr11xx_radio_rx_duty_cycle_mode_t mode);
lr11xx_status_t lr11xx_radio_set_rx_duty_cycle_with_timings_in_rtc_step(void *context,uint32_t rx_period_in_rtc_step,uint32_t sleep_period_in_rtc_step,lr11xx_radio_rx_duty_cycle_mode_t mode);
lr11xx_status_t lr11xx_radio_set_pa_cfg(void *context,lr11xx_radio_pa_cfg_t *pa_cfg);
lr11xx_status_t lr11xx_radio_stop_timeout_on_preamble(void *context,_Bool stop_timeout_on_preamble);
lr11xx_status_t lr11xx_radio_set_cad(void *context);
lr11xx_status_t lr11xx_radio_set_tx_cw(void *context);
lr11xx_status_t lr11xx_radio_set_tx_infinite_preamble(void *context);
lr11xx_status_t lr11xx_radio_set_lora_sync_timeout(void *context,uint16_t nb_symbol);
lr11xx_status_t lr11xx_radio_set_lora_sync_timeout_with_mantissa_exponent(void *context,uint8_t mantissa,uint8_t exponent);
lr11xx_status_t lr11xx_radio_set_gfsk_crc_params(void *context,uint32_t seed,uint32_t polynomial);
lr11xx_status_t lr11xx_radio_set_gfsk_whitening_seed(void *context,uint16_t seed);
lr11xx_status_t lr11xx_radio_cfg_rx_boosted(void *context,_Bool enable_boost_mode);
lr11xx_status_t lr11xx_radio_set_rssi_calibration(void *context,lr11xx_radio_rssi_calibration_table_t *rssi_cal_table);
lr11xx_status_t lr11xx_radio_get_gfsk_rx_bandwidth(uint32_t bw_in_hz,lr11xx_radio_gfsk_bw_t *bw_parameter);
uint32_t lr11xx_radio_get_lora_time_on_air_numerator(lr11xx_radio_pkt_params_lora_t *pkt_p,lr11xx_radio_mod_params_lora_t *mod_p);
uint32_t lr11xx_radio_get_lora_bw_in_hz(lr11xx_radio_lora_bw_t bw);
uint32_t lr11xx_radio_get_lora_time_on_air_in_ms(lr11xx_radio_pkt_params_lora_t *pkt_p,lr11xx_radio_mod_params_lora_t *mod_p);
uint32_t lr11xx_radio_get_gfsk_time_on_air_numerator(lr11xx_radio_pkt_params_gfsk_t *pkt_p);
uint32_t lr11xx_radio_get_gfsk_time_on_air_in_ms(lr11xx_radio_pkt_params_gfsk_t *pkt_p,lr11xx_radio_mod_params_gfsk_t *mod_p);
uint32_t lr11xx_radio_convert_time_in_ms_to_rtc_step(uint32_t time_in_ms);
uint16_t lr11xx_radio_convert_nb_symb_to_mant_exp(uint16_t nb_symbol,uint8_t *mant,uint8_t *exp);
lr11xx_status_t lr11xx_radio_set_lna_mode(void *context,lr11xx_radio_lna_mode_t lna_config);
uint32_t lr11xx_radio_get_gfsk_crc_len_in_bytes(lr11xx_radio_gfsk_crc_type_t crc_type);
lr11xx_status_t lr11xx_regmem_write_buffer8(void *context,uint8_t *buffer,uint8_t length);
lr11xx_status_t lr11xx_regmem_read_buffer8(void *context,uint8_t *buffer,uint8_t offset,uint8_t length);
lr11xx_status_t lr11xx_regmem_write_regmem32_mask(void *context,uint32_t address,uint32_t mask,uint32_t data);
void lr11xx_regmem_fill_cbuffer_opcode_address(uint8_t *cbuffer,uint16_t opcode,uint32_t address);
lr11xx_status_t lr11xx_rttof_set_address(void *context,uint32_t address,uint8_t check_length);
lr11xx_status_t lr11xx_rttof_set_request_address(void *context,uint32_t request_address);
lr11xx_status_t lr11xx_rttof_set_rx_tx_delay_indicator(void *context,uint32_t delay_indicator);
lr11xx_status_t lr11xx_rttof_set_parameters(void *context,uint8_t nb_symbols);
lr11xx_status_t lr11xx_rttof_get_raw_result(void *context,lr11xx_rttof_result_type_t type,uint8_t *result);
int32_t lr11xx_rttof_distance_raw_to_meter(lr11xx_radio_lora_bw_t rttof_bw,uint8_t *raw_distance_buf);
lr11xx_status_t lr11xx_lr_fhss_init(void *context);
uint16_t lr11xx_lr_fhss_get_bit_delay_in_us(lr11xx_lr_fhss_params_t *params,uint16_t payload_length);
lr11xx_status_t lr11xx_lr_fhss_build_frame(void *context,lr11xx_lr_fhss_params_t *lr_fhss_params,uint16_t hop_sequence_id,uint8_t *payload,uint8_t payload_length);
uint32_t lr11xx_lr_fhss_get_time_on_air_in_ms(lr11xx_lr_fhss_params_t *params,uint16_t payload_length);
uint lr11xx_lr_fhss_get_hop_sequence_count(lr11xx_lr_fhss_params_t *lr_fhss_params);
uint16_t lr11xx_lr_fhss_get_nb_bits(lr_fhss_v1_params_t *params,uint16_t payload_length);
lr11xx_status_t lr11xx_system_get_irq_status(void *context,lr11xx_system_irq_mask_t *irq_status);
int8_t lr11xx_rttof_rssi_raw_to_value(uint8_t *raw_rssi_buf);
_Bool ral_lr11xx_handles_part(char *part_number);
ral_status_t ral_lr11xx_reset(void *context);
ral_status_t ral_lr11xx_init(void *context);
ral_status_t ral_lr11xx_wakeup(void *context);
ral_status_t ral_lr11xx_set_sleep(void *context,_Bool retain_config);
ral_status_t ral_lr11xx_set_standby(void *context,ral_standby_cfg_t ral_standby_cfg);
ral_status_t ral_lr11xx_set_fs(void *context);
ral_status_t ral_lr11xx_set_tx(void *context);
ral_status_t ral_lr11xx_set_rx(void *context,uint32_t timeout_in_ms);
ral_status_t ral_lr11xx_cfg_rx_boosted(void *context,_Bool enable_boost_mode);
ral_status_t ral_lr11xx_set_rx_tx_fallback_mode(void *context,ral_fallback_modes_t ral_fallback_mode);
ral_status_t ral_lr11xx_stop_timer_on_preamble(void *context,_Bool enable);
ral_status_t ral_lr11xx_set_rx_duty_cycle(void *context,uint32_t rx_time_in_ms,uint32_t sleep_time_in_ms);
ral_status_t ral_lr11xx_set_lora_cad(void *context);
ral_status_t ral_lr11xx_set_tx_cw(void *context);
ral_status_t ral_lr11xx_set_tx_infinite_preamble(void *context);
ral_status_t ral_lr11xx_cal_img(void *context,uint16_t freq1_in_mhz,uint16_t freq2_in_mhz);
ral_status_t ral_lr11xx_set_tx_cfg(void *context,int8_t output_pwr_in_dbm,uint32_t rf_freq_in_hz);
ral_status_t ral_lr11xx_set_pkt_payload(void *context,uint8_t *buffer,uint16_t size);
ral_status_t ral_lr11xx_get_pkt_payload(void *context,uint16_t max_size_in_bytes,uint8_t *buffer,uint16_t *size_in_bytes);
ral_status_t ral_lr11xx_get_irq_status(void *context,ral_irq_t *irq);
ral_status_t ral_lr11xx_clear_irq_status(void *context,ral_irq_t irq);
ral_status_t ral_lr11xx_get_and_clear_irq_status(void *context,ral_irq_t *irq);
ral_status_t ral_lr11xx_set_dio_irq_params(void *context,ral_irq_t irq);
ral_status_t ral_lr11xx_set_rf_freq(void *context,uint32_t freq_in_hz);
ral_status_t ral_lr11xx_set_pkt_type(void *context,ral_pkt_type_t ral_pkt_type);
ral_status_t ral_lr11xx_get_pkt_type(void *context,ral_pkt_type_t *pkt_type);
ral_status_t ral_lr11xx_set_gfsk_mod_params(void *context,ral_gfsk_mod_params_t *ral_mod_params);
ral_status_t ral_lr11xx_set_gfsk_pkt_params(void *context,ral_gfsk_pkt_params_t *ral_pkt_params);
ral_status_t ral_lr11xx_set_lora_mod_params(void *context,ral_lora_mod_params_t *ral_mod_params);
ral_status_t ral_lr11xx_set_lora_pkt_params(void *context,ral_lora_pkt_params_t *ral_pkt_params);
ral_status_t ral_lr11xx_set_lora_cad_params(void *context,ral_lora_cad_params_t *ral_lora_cad_params);
ral_status_t ral_lr11xx_set_lora_symb_nb_timeout(void *context,uint16_t nb_of_symbs);
ral_status_t ral_lr11xx_set_flrc_mod_params(void *context,ral_flrc_mod_params_t *params);
ral_status_t ral_lr11xx_set_flrc_pkt_params(void *context,ral_flrc_pkt_params_t *params);
ral_status_t ral_lr11xx_get_gfsk_rx_pkt_status(void *context,ral_gfsk_rx_pkt_status_t *ral_rx_pkt_status);
ral_status_t ral_lr11xx_get_lora_rx_pkt_status(void *context,ral_lora_rx_pkt_status_t *ral_rx_pkt_status);
ral_status_t ral_lr11xx_get_flrc_rx_pkt_status(void *context,ral_flrc_rx_pkt_status_t *rx_pkt_status);
ral_status_t ral_lr11xx_get_rssi_inst(void *context,int16_t *rssi_in_dbm);
uint32_t ral_lr11xx_get_lora_time_on_air_in_ms(ral_lora_pkt_params_t *pkt_p,ral_lora_mod_params_t *mod_p);
uint32_t ral_lr11xx_get_gfsk_time_on_air_in_ms(ral_gfsk_pkt_params_t *pkt_p,ral_gfsk_mod_params_t *mod_p);
uint32_t ral_lr11xx_get_flrc_time_on_air_in_ms(ral_flrc_pkt_params_t *pkt_p,ral_flrc_mod_params_t *mod_p);
ral_status_t ral_lr11xx_set_gfsk_sync_word(void *context,uint8_t *sync_word,uint8_t sync_word_len);
ral_status_t ral_lr11xx_set_lora_sync_word(void *context,uint8_t sync_word);
ral_status_t ral_lr11xx_set_flrc_sync_word(void *context,uint8_t *sync_word,uint8_t sync_word_len);
ral_status_t ral_lr11xx_set_gfsk_crc_params(void *context,uint32_t seed,uint32_t polynomial);
ral_status_t ral_lr11xx_set_flrc_crc_params(void *context,uint32_t seed);
ral_status_t ral_lr11xx_set_gfsk_whitening_seed(void *context,uint16_t seed);
ral_status_t ral_lr11xx_lr_fhss_init(void *context,ral_lr_fhss_params_t *lr_fhss_params);
ral_status_t ral_lr11xx_lr_fhss_build_frame(void *context,ral_lr_fhss_params_t *lr_fhss_params,ral_lr_fhss_memory_state_t state,uint16_t hop_sequence_id,uint8_t *payload,uint16_t payload_length);
ral_status_t ral_lr11xx_lr_fhss_handle_hop(void *context,ral_lr_fhss_params_t *lr_fhss_params,ral_lr_fhss_memory_state_t state);
ral_status_t ral_lr11xx_lr_fhss_handle_tx_done(void *context,ral_lr_fhss_params_t *lr_fhss_params,ral_lr_fhss_memory_state_t state);
ral_status_t ral_lr11xx_lr_fhss_get_time_on_air_in_ms(void *context,ral_lr_fhss_params_t *lr_fhss_params,uint16_t payload_length,uint32_t *time_on_air);
ral_status_t ral_lr11xx_lr_fhss_get_hop_sequence_count(void *context,ral_lr_fhss_params_t *lr_fhss_params,uint *hop_sequence_count);
ral_status_t ral_lr11xx_lr_fhss_get_bit_delay_in_us(void *context,ral_lr_fhss_params_t *params,uint16_t payload_length,uint16_t *delay);
ral_status_t ral_lr11xx_get_lora_rx_pkt_cr_crc(void *context,ral_lora_cr_t *cr,_Bool *is_crc_present);
ral_status_t ral_lr11xx_get_tx_consumption_in_ua(void *context,int8_t output_pwr_in_dbm,uint32_t rf_freq_in_hz,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr11xx_get_gfsk_rx_consumption_in_ua(void *context,uint32_t br_in_bps,uint32_t bw_dsb_in_hz,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr11xx_get_lora_rx_consumption_in_ua(void *context,ral_lora_bw_t bw,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr11xx_get_random_numbers(void *context,uint32_t *numbers,uint n);
ral_status_t ral_lr11xx_handle_rx_done(void *context);
ral_status_t ral_lr11xx_handle_tx_done(void *context);
ral_status_t ral_lr11xx_get_lora_cad_det_peak(void *context,ral_lora_sf_t sf,ral_lora_bw_t bw,ral_lora_cad_symbs_t nb_symbol,uint8_t *cad_det_peak);
ral_irq_t ral_lr11xx_convert_irq_flags_to_ral(lr11xx_system_irq_mask_t lr11xx_irq_status);
lr11xx_system_irq_mask_t ral_lr11xx_convert_irq_flags_from_ral(ral_irq_t ral_irq);
ral_status_t ral_lr11xx_convert_gfsk_mod_params_from_ral(ral_gfsk_mod_params_t *ral_mod_params,lr11xx_radio_mod_params_gfsk_t *radio_mod_params);
ral_status_t ral_lr11xx_convert_gfsk_pkt_params_from_ral(ral_gfsk_pkt_params_t *ral_pkt_params,lr11xx_radio_pkt_params_gfsk_t *radio_pkt_params);
ral_status_t ral_lr11xx_convert_lora_mod_params_from_ral(ral_lora_mod_params_t *ral_mod_params,lr11xx_radio_mod_params_lora_t *radio_mod_params);
ral_status_t ral_lr11xx_convert_lora_pkt_params_from_ral(ral_lora_pkt_params_t *ral_pkt_params,lr11xx_radio_pkt_params_lora_t *radio_pkt_params);
ral_status_t ral_lr11xx_convert_lora_cad_params_from_ral(ral_lora_cad_params_t *ral_lora_cad_params,lr11xx_radio_cad_params_t *radio_lora_cad_params);
void ral_lr11xx_convert_lr_fhss_params_from_ral(ral_lr_fhss_params_t *ral_lr_fhss_params,lr11xx_lr_fhss_params_t *radio_lr_fhss_params);
ral_status_t ral_lr11xx_rttof_set_parameters(void *context,uint8_t nb_symbols);
ral_status_t ral_lr11xx_rttof_set_request_address(void *context,uint32_t request_address);
ral_status_t ral_lr11xx_rttof_set_rx_tx_delay_indicator(void *context,uint32_t delay_indicator);
ral_status_t ral_lr11xx_rttof_get_raw_result(void *context,ral_lora_bw_t rttof_bw,int32_t *raw_results,int32_t *meter_results,int8_t *rssi_result);
ral_status_t ral_lr11xx_rttof_set_address(void *context,uint32_t address,uint8_t check_length);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1110mb1dis_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1110mb1dis_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1110mb1dis_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1110mb1dis_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1110mb1dis_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1110mb1dis_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1110mb1dis_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1110mb1djs_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1110mb1djs_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1110mb1djs_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1110mb1djs_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1110mb1djs_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1110mb1djs_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1110mb1djs_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1110mb1gis_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1110mb1gis_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1110mb1gis_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1110mb1gis_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1110mb1gis_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1110mb1gis_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1110mb1gis_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1110mb1gjs_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1110mb1gjs_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1110mb1gjs_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1110mb1gjs_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1110mb1gjs_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1110mb1gjs_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1110mb1gjs_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1120mb1dis_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1120mb1dis_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1120mb1dis_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1120mb1dis_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1120mb1dis_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1120mb1dis_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1120mb1dis_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1120mb1djs_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1120mb1djs_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1120mb1djs_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1120mb1djs_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1120mb1djs_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1120mb1djs_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1120mb1djs_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1121mb1dis_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1121mb1dis_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1121mb1dis_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1121mb1dis_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1121mb1dis_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1121mb1dis_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1121mb1dis_get_pinout(void);
smtc_shield_lr11xx_pa_pwr_cfg_t *smtc_shield_lr1121mb1gis_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_dbm);
lr11xx_radio_rssi_calibration_table_t *smtc_shield_lr1121mb1gis_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr11xx_system_rfswitch_cfg_t * smtc_shield_lr1121mb1gis_get_rf_switch_cfg(void);
lr11xx_system_reg_mode_t smtc_shield_lr1121mb1gis_get_reg_mode(void);
smtc_shield_lr11xx_xosc_cfg_t * smtc_shield_lr1121mb1gis_get_xosc_cfg(void);
smtc_shield_lr11xx_lfclk_cfg_t * smtc_shield_lr1121mb1gis_get_lfclk_cfg(void);
smtc_shield_lr11xx_pinout_t * smtc_shield_lr1121mb1gis_get_pinout(void);
lr20xx_status_t lr20xx_system_reset(void *context);
lr20xx_status_t lr20xx_system_wakeup(void *context);
lr20xx_status_t lr20xx_system_get_status(void *context,lr20xx_system_stat1_t *stat1,lr20xx_system_stat2_t *stat2,lr20xx_system_irq_mask_t *irq_status);
lr20xx_status_t lr20xx_system_get_version(void *context,lr20xx_system_version_t *version);
lr20xx_status_t lr20xx_system_get_errors(void *context,lr20xx_system_errors_t *errors);
lr20xx_status_t lr20xx_system_clear_errors(void *context);
uint8_t lr20xx_system_dio_get_count(void);
_Bool lr20xx_system_dio_get_nth(uint8_t nth,lr20xx_system_dio_t *dio);
lr20xx_status_t lr20xx_system_set_dio_function(void *context,lr20xx_system_dio_t dio,lr20xx_system_dio_func_t func,lr20xx_system_dio_drive_t drive);
lr20xx_status_t lr20xx_system_set_dio_rf_switch_cfg(void *context,lr20xx_system_dio_t dio,lr20xx_system_dio_rf_switch_cfg_t rf_switch_cfg);
lr20xx_status_t lr20xx_system_set_dio_irq_cfg(void *context,lr20xx_system_dio_t dio,lr20xx_system_irq_mask_t irq_cfg);
lr20xx_status_t lr20xx_system_clear_irq_status(void *context,lr20xx_system_irq_mask_t irqs_to_clear);
lr20xx_status_t lr20xx_system_get_and_clear_irq_status(void *context,lr20xx_system_irq_mask_t *irqs);
lr20xx_status_t lr20xx_system_cfg_lfclk(void *context,lr20xx_system_lfclk_cfg_t lfclock_cfg);
lr20xx_status_t lr20xx_system_cfg_clk_output(void *context,lr20xx_system_hf_clk_scaling_t hf_clk_scaling);
lr20xx_status_t lr20xx_system_set_tcxo_mode(void *context,lr20xx_system_tcxo_supply_voltage_t tune,uint32_t start_delay_in_rtc_step);
lr20xx_status_t lr20xx_system_set_reg_mode(void *context,lr20xx_system_reg_mode_t reg_mode);
lr20xx_status_t lr20xx_system_get_random_number(void *context,lr20xx_system_random_entropy_source_bitmask_t source,uint32_t *random_number);
lr20xx_status_t lr20xx_system_set_sleep_mode(void *context,lr20xx_system_sleep_cfg_t *sleep_cfg,uint32_t sleep_time);
lr20xx_status_t lr20xx_system_set_standby_mode(void *context,lr20xx_system_standby_mode_t standby_mode);
lr20xx_status_t lr20xx_system_set_fs_mode(void *context);
void lr20xx_system_convert_stat1_byte_to_enum(uint8_t stat1_byte,lr20xx_system_stat1_t *stat1);
void lr20xx_system_convert_stat2_byte_to_enum(uint8_t stat2_byte,lr20xx_system_stat2_t *stat2);
lr20xx_status_t lr20xx_radio_common_calibrate_front_end(void *context,lr20xx_radio_common_raw_front_end_calibration_value_t *front_end_calibration_values,uint8_t n_front_end_calibration_values);
lr20xx_status_t lr20xx_radio_common_calibrate_front_end_helper(void *context,lr20xx_radio_common_front_end_calibration_value_t *front_end_calibration_structures,uint8_t n_front_end_calibration_structures);
uint32_t lr20xx_radio_common_convert_time_in_ms_to_rtc_step(uint32_t time_in_ms);
lr20xx_status_t lr20xx_radio_common_set_rf_freq(void *context,uint32_t freq_in_hz);
lr20xx_status_t lr20xx_radio_common_set_rx_path(void *context,lr20xx_radio_common_rx_path_t rx_path,lr20xx_radio_common_rx_path_boost_mode_t boost_mode);
lr20xx_status_t lr20xx_radio_common_set_pa_cfg(void *context,lr20xx_radio_common_pa_cfg_t *pa_cfg);
lr20xx_status_t lr20xx_radio_common_set_tx_params(void *context,int8_t power_half_dbm,lr20xx_radio_common_ramp_time_t ramp_time);
lr20xx_status_t lr20xx_radio_common_set_rx_tx_fallback_mode(void *context,lr20xx_radio_common_fallback_modes_t fallback_mode);
lr20xx_status_t lr20xx_radio_common_set_pkt_type(void *context,lr20xx_radio_common_pkt_type_t pkt_type);
lr20xx_status_t lr20xx_radio_common_get_pkt_type(void *context,lr20xx_radio_common_pkt_type_t *pkt_type);
lr20xx_status_t lr20xx_radio_common_set_rx_timeout_stop_event(void *context,_Bool is_stopped_on_preamble_detection);
lr20xx_status_t lr20xx_radio_common_get_rssi_inst(void *context,int16_t *rssi_in_dbm,uint8_t *half_dbm_count);
lr20xx_status_t lr20xx_radio_common_set_rx(void *context,uint32_t timeout_in_ms);
lr20xx_status_t lr20xx_radio_common_set_rx_with_timeout_in_rtc_step(void *context,uint32_t timeout_in_rtc_step);
lr20xx_status_t lr20xx_radio_common_set_tx(void *context,uint32_t timeout_in_ms);
lr20xx_status_t lr20xx_radio_common_set_tx_with_timeout_in_rtc_step(void *context,uint32_t timeout_in_rtc_step);
lr20xx_status_t lr20xx_radio_common_set_tx_test_mode(void *context,lr20xx_radio_common_tx_test_mode_t mode);
lr20xx_status_t lr20xx_radio_common_set_rx_duty_cycle(void *context,uint32_t rx_period_in_ms,uint32_t sleep_period_in_ms,lr20xx_radio_common_rx_duty_cycle_mode_t mode);
lr20xx_status_t lr20xx_radio_common_set_rx_duty_cycle_with_timing_in_rtc_step(void *context,uint32_t rx_period_in_rtc_step,uint32_t sleep_period_in_rtc_step,lr20xx_radio_common_rx_duty_cycle_mode_t mode);
lr20xx_status_t lr20xx_radio_common_get_rx_packet_length(void *context,uint16_t *pkt_len);
lr20xx_status_t lr20xx_radio_fifo_read_rx(void *context,uint8_t *buffer,uint16_t length);
lr20xx_status_t lr20xx_radio_fifo_write_tx(void *context,uint8_t *buffer,uint16_t length);
lr20xx_status_t lr20xx_radio_fifo_clear_rx(void *context);
lr20xx_status_t lr20xx_radio_fsk_set_modulation_params(void *context,lr20xx_radio_fsk_mod_params_t *mod_params);
lr20xx_status_t lr20xx_radio_fsk_set_packet_params(void *context,lr20xx_radio_fsk_pkt_params_t *pkt_params);
lr20xx_status_t lr20xx_radio_fsk_set_whitening_params(void *context,lr20xx_radio_fsk_whitening_compatibility_t whitening_type,uint16_t whitening_seed);
lr20xx_status_t lr20xx_radio_fsk_set_crc_params(void *context,uint32_t crc_polynomial,uint32_t crc_seed);
lr20xx_status_t lr20xx_radio_fsk_set_syncword(void *context,uint8_t *syncword,uint8_t nb_bits,lr20xx_radio_fsk_syncword_bit_order_t bit_order);
lr20xx_status_t lr20xx_radio_fsk_set_addresses(void *context,uint8_t node_address,uint8_t broadcast_address);
lr20xx_status_t lr20xx_radio_fsk_get_packet_status(void *context,lr20xx_radio_fsk_packet_status_t *pkt_status);
lr20xx_status_t lr20xx_radio_fsk_get_rx_bandwidth(uint32_t bw_in_hz,lr20xx_radio_fsk_common_bw_t *bw_parameter);
uint32_t lr20xx_radio_fsk_get_time_on_air_numerator(lr20xx_radio_fsk_pkt_params_t *pkt_p,uint8_t syncword_len_in_bit);
uint32_t lr20xx_radio_fsk_get_time_on_air_in_ms(lr20xx_radio_fsk_pkt_params_t *pkt_p,lr20xx_radio_fsk_mod_params_t *mod_p,uint8_t syncword_len_in_bit);
uint32_t lr20xx_radio_fsk_get_crc_len_in_bytes(lr20xx_radio_fsk_crc_t crc_type);
lr20xx_status_t lr20xx_radio_lora_set_modulation_params(void *context,lr20xx_radio_lora_mod_params_t *mod_params);
lr20xx_status_t lr20xx_radio_lora_set_packet_params(void *context,lr20xx_radio_lora_pkt_params_t *pkt_params);
lr20xx_status_t lr20xx_radio_lora_configure_timeout_by_number_of_symbols(void *context,uint8_t n_symbols);
lr20xx_status_t lr20xx_radio_lora_set_syncword(void *context,uint8_t syncword);
lr20xx_status_t lr20xx_radio_lora_configure_cad_params(void *context,lr20xx_radio_lora_cad_params_t *cad_params);
lr20xx_status_t lr20xx_radio_lora_set_cad(void *context);
lr20xx_status_t lr20xx_radio_lora_get_packet_status(void *context,lr20xx_radio_lora_packet_status_t *pkt_status);
uint32_t lr20xx_radio_lora_get_time_on_air_numerator(lr20xx_radio_lora_pkt_params_t *pkt_p,lr20xx_radio_lora_mod_params_t *mod_p);
uint32_t lr20xx_radio_lora_get_bw_in_hz(lr20xx_radio_lora_bw_t bw);
uint32_t lr20xx_radio_lora_get_time_on_air_in_ms(lr20xx_radio_lora_pkt_params_t *pkt_p,lr20xx_radio_lora_mod_params_t *mod_p);
lr20xx_status_t abstract_search_symbols(void *context,uint8_t n_symbols,search_symbol_format_t format);
lr20xx_status_t lr20xx_radio_lr_fhss_build_frame(void *context,lr20xx_radio_lr_fhss_params_t *lr_fhss_params,uint16_t hop_sequence_id,uint8_t *payload,uint8_t payload_length);
lr20xx_status_t lr20xx_radio_lr_fhss_set_sync_word(void *context,uint8_t *sync_word);
lr20xx_status_t lr20xx_radio_lr_fhss_init(void *context);
uint32_t lr20xx_radio_lr_fhss_get_time_on_air_in_ms(lr20xx_radio_lr_fhss_params_t *params,uint16_t payload_length);
uint lr20xx_radio_lr_fhss_get_hop_sequence_count(lr20xx_radio_lr_fhss_params_t *lr_fhss_params);
uint16_t lr20xx_radio_lr_fhss_get_nb_bits(lr_fhss_v1_params_t *params,uint16_t payload_length);
lr20xx_status_t lr20xx_rttof_set_responder_address(void *context,uint32_t address,uint8_t length);
lr20xx_status_t lr20xx_rttof_set_initiator_address(void *context,uint32_t address);
lr20xx_status_t lr20xx_rttof_get_results(void *context,lr20xx_rttof_results_t *result);
lr20xx_status_t lr20xx_rttof_set_tx_rx_delay(void *context,uint32_t delay_in_rtc_step);
lr20xx_status_t lr20xx_rttof_set_params(void *context,lr20xx_rttof_params_t *params);
int32_t lr20xx_rttof_distance_raw_to_meter(lr20xx_radio_lora_bw_t rttof_bw,int32_t raw_distance);
lr20xx_status_t lr20xx_rttof_fix_and_convert_rssi(void *context,uint8_t rssi1_raw,uint8_t rssi2_raw,int8_t *rssi1_val,int8_t *rssi2_val);
void lr20xx_rttof_convert_rssi(uint8_t rssi1_raw,uint8_t rssi2_raw,int8_t *rssi1_val,int8_t *rssi2_val);
lr20xx_status_t lr20xx_rttof_apply_rttof_stuck_workaround(void *context,lr20xx_rttof_mode_t rttof_mode);
lr20xx_status_t lr20xx_regmem_write_regmem32(void *context,uint32_t address,uint32_t *buffer,uint8_t length);
lr20xx_status_t lr20xx_regmem_write_regmem32_mask(void *context,uint32_t address,uint32_t mask,uint32_t data);
lr20xx_status_t lr20xx_regmem_read_regmem32(void *context,uint32_t address,uint32_t *buffer,uint8_t length);
void lr20xx_regmem_fill_cbuffer_opcode_address(uint8_t *cbuffer,uint16_t opcode,uint32_t address);
void lr20xx_regmem_fill_cbuffer_opcode_address_length(uint8_t *cbuffer,uint16_t opcode,uint32_t address,uint8_t length);
void lr20xx_regmem_fill_cdata(uint8_t *cdata,uint32_t *data,uint8_t data_length);
void lr20xx_regmem_fill_cbuffer_cdata_opcode_address_data(uint8_t *cbuffer,uint8_t *cdata,uint16_t opcode,uint32_t address,uint32_t *data,uint8_t data_length);
void lr20xx_regmem_fill_out_buffer_from_raw_buffer(uint32_t *out_buffer,uint8_t *raw_buffer,uint8_t out_buffer_length);
lr20xx_status_t lr20xx_workarounds_ook_set_detection_threshold_level(void *context,int16_t threshold_level_db);
lr20xx_status_t lr20xx_workarounds_rttof_rssi_computation(void *context,uint8_t rssi1_raw_value,uint8_t rssi2_raw_value,uint8_t *rssi1_raw_fixed,uint8_t *rssi2_raw_fixed);
lr20xx_status_t lr20xx_workarounds_dcdc_reset(void *context);
lr20xx_status_t lr20xx_workarounds_dcdc_configure(void *context);
lr20xx_status_t lr20xx_workarounds_rttof_extended_stuck_second_request_enable(void *context);
lr20xx_status_t lr20xx_workarounds_rttof_extended_stuck_second_request_disable(void *context);
lr20xx_status_t lr20xx_workarounds_rttof_rssi_computation_get_gain_power(void *context,uint16_t *max_gain,int16_t *power_offset);
uint8_t lr20xx_workarounds_rttof_rssi_computation_apply_correction(uint16_t max_gain,int16_t power_offset,uint8_t raw_rssi);
lr20xx_status_t lr20xx_workaround_dcdc_set_frequency(void *context,uint32_t frequency);
lr20xx_status_t lr20xx_workaround_dcdc_get_rf_frequency(void *context,uint32_t *frequency);
uint32_t pll_step_to_hz(uint32_t pll_steps);
lr20xx_status_t lr20xx_radio_flrc_set_modulation_params(void *context,lr20xx_radio_flrc_mod_params_t *params);
lr20xx_status_t lr20xx_radio_flrc_set_pkt_params(void *context,lr20xx_radio_flrc_pkt_params_t *params);
lr20xx_status_t lr20xx_radio_flrc_set_syncword(void *context,uint8_t syncword_index,uint8_t *syncword);
lr20xx_status_t lr20xx_radio_flrc_set_syncword_base(void *context,uint8_t syncword_index,uint8_t *syncword,uint8_t syncword_length);
lr20xx_status_t lr20xx_radio_ook_set_modulation_params(void *context,lr20xx_radio_ook_mod_params_t *params);
lr20xx_status_t lr20xx_radio_ook_set_packet_params(void *context,lr20xx_radio_ook_pkt_params_t *params);
lr20xx_status_t lr20xx_radio_ook_set_crc_params(void *context,uint32_t crc_polynomial,uint32_t crc_seed);
lr20xx_status_t lr20xx_radio_ook_set_syncword(void *context,uint8_t *syncword,uint8_t nb_bits,lr20xx_radio_ook_syncword_bit_order_t bit_order);
lr20xx_status_t lr20xx_radio_ook_set_addresses(void *context,uint8_t node_address,uint8_t broadcast_address);
lr20xx_status_t lr20xx_radio_ook_set_rx_detector(void *context,lr20xx_radio_ook_rx_detector_t *rx_detector);
lr20xx_status_t lr20xx_radio_ook_set_whitening_params(void *context,lr20xx_radio_ook_whitening_params_t *params);
uint8_t pulse_shape_to_byte(lr20xx_radio_ook_pulse_shape_t *pulse_shape);
_Bool ral_lr20xx_handles_part(char *part_number);
ral_status_t ral_lr20xx_reset(void *context);
ral_status_t ral_lr20xx_wakeup(void *context);
ral_status_t ral_lr20xx_init(void *context);
ral_status_t ral_lr20xx_set_sleep(void *context,_Bool retain_config);
ral_status_t ral_lr20xx_set_standby(void *context,ral_standby_cfg_t ral_standby_cfg);
ral_status_t ral_lr20xx_set_fs(void *context);
ral_status_t ral_lr20xx_set_tx(void *context);
ral_status_t ral_lr20xx_set_rx(void *context,uint32_t timeout_in_ms);
ral_status_t ral_lr20xx_cfg_rx_boosted(void *context,_Bool enable_boost_mode);
ral_status_t ral_lr20xx_set_rx_tx_fallback_mode(void *context,ral_fallback_modes_t ral_fallback_mode);
ral_status_t ral_lr20xx_stop_timer_on_preamble(void *context,_Bool enable);
ral_status_t ral_lr20xx_set_rx_duty_cycle(void *context,uint32_t rx_time_in_ms,uint32_t sleep_time_in_ms);
ral_status_t ral_lr20xx_set_lora_cad(void *context);
ral_status_t ral_lr20xx_set_tx_cw(void *context);
ral_status_t ral_lr20xx_set_tx_infinite_preamble(void *context);
ral_status_t ral_lr20xx_cal_img(void *context,uint16_t freq1_in_mhz,uint16_t freq2_in_mhz);
ral_status_t ral_lr20xx_set_tx_cfg(void *context,int8_t output_pwr_in_dbm,uint32_t rf_freq_in_hz);
ral_status_t ral_lr20xx_set_pkt_payload(void *context,uint8_t *buffer,uint16_t size);
ral_status_t ral_lr20xx_get_pkt_payload(void *context,uint16_t max_size_in_bytes,uint8_t *buffer,uint16_t *size_in_bytes);
ral_status_t ral_lr20xx_get_irq_status(void *context,ral_irq_t *irq);
ral_status_t ral_lr20xx_clear_irq_status(void *context,ral_irq_t irq);
ral_status_t ral_lr20xx_get_and_clear_irq_status(void *context,ral_irq_t *irq);
ral_status_t ral_lr20xx_set_dio_irq_params(void *context,ral_irq_t irq);
ral_status_t ral_lr20xx_set_rf_freq(void *context,uint32_t freq_in_hz);
ral_status_t ral_lr20xx_set_pkt_type(void *context,ral_pkt_type_t ral_pkt_type);
ral_status_t ral_lr20xx_get_pkt_type(void *context,ral_pkt_type_t *pkt_type);
ral_status_t ral_lr20xx_set_gfsk_mod_params(void *context,ral_gfsk_mod_params_t *ral_mod_params);
ral_status_t ral_lr20xx_set_gfsk_pkt_params(void *context,ral_gfsk_pkt_params_t *ral_pkt_params);
ral_status_t ral_lr20xx_set_gfsk_pkt_address(void *context,uint8_t node_address,uint8_t braodcast_address);
ral_status_t ral_lr20xx_set_lora_mod_params(void *context,ral_lora_mod_params_t *ral_mod_params);
ral_status_t ral_lr20xx_set_lora_pkt_params(void *context,ral_lora_pkt_params_t *ral_pkt_params);
ral_status_t ral_lr20xx_set_lora_cad_params(void *context,ral_lora_cad_params_t *ral_lora_cad_params);
ral_status_t ral_lr20xx_set_lora_symb_nb_timeout(void *context,uint16_t nb_of_symbs);
ral_status_t ral_lr20xx_set_flrc_mod_params(void *context,ral_flrc_mod_params_t *params);
ral_status_t ral_lr20xx_set_flrc_pkt_params(void *context,ral_flrc_pkt_params_t *params);
ral_status_t ral_lr20xx_get_gfsk_rx_pkt_status(void *context,ral_gfsk_rx_pkt_status_t *ral_rx_pkt_status);
ral_status_t ral_lr20xx_get_lora_rx_pkt_status(void *context,ral_lora_rx_pkt_status_t *ral_rx_pkt_status);
ral_status_t ral_lr20xx_get_flrc_rx_pkt_status(void *context,ral_flrc_rx_pkt_status_t *rx_pkt_status);
ral_status_t ral_lr20xx_get_rssi_inst(void *context,int16_t *rssi_in_dbm);
uint32_t ral_lr20xx_get_lora_time_on_air_in_ms(ral_lora_pkt_params_t *pkt_p,ral_lora_mod_params_t *mod_p);
uint32_t ral_lr20xx_get_gfsk_time_on_air_in_ms(ral_gfsk_pkt_params_t *pkt_p,ral_gfsk_mod_params_t *mod_p);
uint32_t ral_lr20xx_get_flrc_time_on_air_in_ms(ral_flrc_pkt_params_t *pkt_p,ral_flrc_mod_params_t *mod_p);
ral_status_t ral_lr20xx_set_gfsk_sync_word(void *context,uint8_t *sync_word,uint8_t sync_word_len);
ral_status_t ral_lr20xx_set_lora_sync_word(void *context,uint8_t sync_word);
ral_status_t ral_lr20xx_set_flrc_sync_word(void *context,uint8_t *sync_word,uint8_t sync_word_len);
ral_status_t ral_lr20xx_set_gfsk_crc_params(void *context,uint32_t seed,uint32_t polynomial);
ral_status_t ral_lr20xx_set_flrc_crc_params(void *context,uint32_t seed);
ral_status_t ral_lr20xx_set_gfsk_whitening_seed(void *context,uint16_t seed);
ral_status_t ral_lr20xx_lr_fhss_init(void *context,ral_lr_fhss_params_t *lr_fhss_params);
ral_status_t ral_lr20xx_lr_fhss_build_frame(void *context,ral_lr_fhss_params_t *lr_fhss_params,ral_lr_fhss_memory_state_t state,uint16_t hop_sequence_id,uint8_t *payload,uint16_t payload_length);
ral_status_t ral_lr20xx_lr_fhss_handle_hop(void *context,ral_lr_fhss_params_t *lr_fhss_params,ral_lr_fhss_memory_state_t state);
ral_status_t ral_lr20xx_lr_fhss_handle_tx_done(void *context,ral_lr_fhss_params_t *lr_fhss_params,ral_lr_fhss_memory_state_t state);
ral_status_t ral_lr20xx_get_random_numbers(void *context,uint32_t *numbers,uint n);
ral_status_t ral_lr20xx_handle_rx_done(void *context);
ral_status_t ral_lr20xx_handle_tx_done(void *context);
ral_status_t ral_lr20xx_get_lora_rx_pkt_cr_crc(void *context,ral_lora_cr_t *cr,_Bool *is_crc_present);
ral_status_t ral_lr20xx_get_tx_consumption_in_ua(void *context,int8_t output_pwr_in_dbm,uint32_t rf_freq_in_hz,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr20xx_get_gfsk_rx_consumption_in_ua(void *context,uint32_t br_in_bps,uint32_t bw_dsb_in_hz,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr20xx_get_lora_rx_consumption_in_ua(void *context,ral_lora_bw_t bw,_Bool rx_boosted,uint32_t *pwr_consumption_in_ua);
ral_status_t ral_lr20xx_lr_fhss_get_time_on_air_in_ms(void *context,ral_lr_fhss_params_t *lr_fhss_params,uint16_t payload_length,uint32_t *time_on_air);
ral_status_t ral_lr20xx_lr_fhss_get_bit_delay_in_us(void *context,ral_lr_fhss_params_t *params,uint16_t payload_length,uint16_t *delay);
ral_status_t ral_lr20xx_lr_fhss_get_hop_sequence_count(void *context,ral_lr_fhss_params_t *lr_fhss_params,uint *hop_sequence_count);
ral_status_t ral_lr20xx_get_lora_cad_det_peak(void *context,ral_lora_sf_t sf,ral_lora_bw_t bw,ral_lora_cad_symbs_t nb_symbol,uint8_t *cad_det_peak);
ral_irq_t ral_lr20xx_convert_irq_flags_to_ral(lr20xx_system_irq_mask_t lr20xx_irq_status);
lr20xx_system_irq_mask_t ral_lr20xx_convert_irq_flags_from_ral(ral_irq_t ral_irq);
ral_status_t ral_lr20xx_convert_gfsk_mod_params_from_ral(ral_gfsk_mod_params_t *ral_mod_params,lr20xx_radio_fsk_mod_params_t *radio_mod_params);
ral_status_t ral_lr20xx_convert_gfsk_pkt_params_from_ral(ral_gfsk_pkt_params_t *ral_pkt_params,lr20xx_radio_fsk_pkt_params_t *radio_pkt_params);
ral_status_t ral_lr20xx_convert_lora_mod_params_from_ral(ral_lora_mod_params_t *ral_mod_params,lr20xx_radio_lora_mod_params_t *radio_mod_params);
ral_status_t ral_lr20xx_convert_lora_pkt_params_from_ral(ral_lora_pkt_params_t *ral_pkt_params,lr20xx_radio_lora_pkt_params_t *radio_pkt_params);
ral_status_t ral_lr20xx_convert_lora_cad_params_from_ral(ral_lora_cad_params_t *ral_lora_cad_params,lr20xx_radio_lora_cad_params_t *radio_lora_cad_params);
void ral_lr20xx_convert_lr_fhss_params_from_ral(ral_lr_fhss_params_t *ral_lr_fhss_params,lr20xx_radio_lr_fhss_params_t *radio_lr_fhss_params);
ral_status_t ral_lr20xx_rttof_set_parameters(void *context,uint8_t nb_symbols);
ral_status_t ral_lr20xx_rttof_set_address(void *context,uint32_t address,uint8_t check_length);
ral_status_t ral_lr20xx_rttof_set_request_address(void *context,uint32_t request_address);
ral_status_t ral_lr20xx_rttof_set_rx_tx_delay_indicator(void *context,uint32_t delay_indicator);
ral_status_t ral_lr20xx_rttof_get_raw_result(void *context,ral_lora_bw_t rttof_bw,int32_t *raw_results,int32_t *meter_results,int8_t *rssi_result);
smtc_shield_lr20xx_pinout_t *smtc_shield_lr20xx_common_get_pinout(smtc_shield_lr20xx_connector_interface_t connector_type);
smtc_shield_lr20xx_pa_pwr_cfg_t *smtc_shield_lr20xx_common_get_pa_pwr_cfg(uint32_t rf_freq_in_hz,int8_t expected_output_pwr_in_half_dbm);
lr20xx_radio_common_rssi_calibration_gain_table_t *smtc_shield_lr20xx_common_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr20xx_system_dio_t * smtc_shield_lr20xx_common_get_irq_dio(void);
lr20xx_system_reg_mode_t * smtc_shield_lr20xx_common_get_reg_mode(void);
lr20xx_system_lfclk_cfg_t * smtc_shield_lr20xx_common_get_lfclk_cfg(void);
smtc_shield_lr20xx_xosc_cfg_t * smtc_shield_lr20xx_common_get_xosc_cfg(void);
_Bool smtc_shield_lr20xx_common_rttof_recommended_rx_tx_delay_indicator(uint32_t rf_freq_in_hz,lr20xx_radio_lora_bw_t bw,lr20xx_radio_lora_sf_t sf,uint32_t *delay_indicator);
lr20xx_system_dio_rf_switch_cfg_t *smtc_shield_lr20xx_common_get_rf_switch_cfg(lr20xx_system_dio_t dio);
lr20xx_system_dio_drive_t * smtc_shield_lr20xx_common_get_dio_sleep_drive(lr20xx_system_dio_t dio);
lr20xx_system_dio_func_t * smtc_shield_lr20xx_common_get_dio_function(lr20xx_system_dio_t dio);
lr20xx_system_irq_mask_t * smtc_shield_lr20xx_common_get_dio_irq_mask(lr20xx_system_dio_t dio);
lr20xx_system_dio_rf_switch_cfg_t *smtc_shield_lr2021_arduino_legacy_get_rf_switch_cfg(lr20xx_system_dio_t dio);
lr20xx_system_dio_drive_t *smtc_shield_lr2021_arduino_legacy_get_dio_sleep_drive(lr20xx_system_dio_t dio);
lr20xx_system_dio_func_t *smtc_shield_lr2021_arduino_legacy_get_dio_function(lr20xx_system_dio_t dio);
lr20xx_system_irq_mask_t *smtc_shield_lr2021_arduino_legacy_get_dio_irq_mask(lr20xx_system_dio_t dio);
lr20xx_system_reg_mode_t * smtc_shield_lr2021_arduino_legacy_get_reg_mode(void);
smtc_shield_lr20xx_xosc_cfg_t * smtc_shield_lr2021_arduino_legacy_get_xosc_cfg(void);
smtc_shield_lr20xx_pinout_t * smtc_shield_lr2021_arduino_legacy_get_pinout(void);
lr20xx_system_lfclk_cfg_t * smtc_shield_lr2021_arduino_legacy_get_lfclk_cfg(void);
lr20xx_radio_common_rssi_calibration_gain_table_t *smtc_shield_lr2021_arduino_legacy_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
lr20xx_system_dio_rf_switch_cfg_t *smtc_shield_lr2021_evk_get_rf_switch_cfg(lr20xx_system_dio_t dio);
lr20xx_system_dio_drive_t * smtc_shield_lr2021_evk_get_dio_sleep_drive(lr20xx_system_dio_t dio);
lr20xx_system_dio_func_t * smtc_shield_lr2021_evk_get_dio_function(lr20xx_system_dio_t dio);
lr20xx_system_irq_mask_t * smtc_shield_lr2021_evk_get_dio_irq_mask(lr20xx_system_dio_t dio);
lr20xx_system_reg_mode_t * smtc_shield_lr2021_evk_get_reg_mode(void);
smtc_shield_lr20xx_xosc_cfg_t * smtc_shield_lr2021_evk_get_xosc_cfg(void);
smtc_shield_lr20xx_pinout_t * smtc_shield_lr2021_evk_get_pinout_arduino(void);
lr20xx_system_lfclk_cfg_t * smtc_shield_lr2021_evk_get_lfclk_cfg(void);
lr20xx_radio_common_rssi_calibration_gain_table_t *smtc_shield_lr2021_evk_get_rssi_calibration_table(uint32_t rf_freq_in_hz);
void Reset_Handler(void);
void TIM1_BRK_TIM15_IRQHandler(void);
int _init(EVP_PKEY_CTX *ctx);
void _fini(void);

